
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002410  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800251c  0800251c  0001251c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025f0  080025f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080025f0  080025f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025f0  080025f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025f0  080025f0  000125f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025f4  080025f4  000125f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080025f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  08002668  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002668  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075d2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ca  00000000  00000000  0002766b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  00028e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  00029568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d0a  00000000  00000000  00029be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008fed  00000000  00000000  000438ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ee4  00000000  00000000  0004c8d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d07bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022d8  00000000  00000000  000d080c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002504 	.word	0x08002504

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002504 	.word	0x08002504

0800014c <_ZN8CppClassC1Eif>:
#include "AMS.hpp"


CppClass::CppClass(int x, float y)
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
{
    r1 = x;
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	68ba      	ldr	r2, [r7, #8]
 800015c:	601a      	str	r2, [r3, #0]
    r2 = y;
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	687a      	ldr	r2, [r7, #4]
 8000162:	605a      	str	r2, [r3, #4]
    
}
 8000164:	68fb      	ldr	r3, [r7, #12]
 8000166:	4618      	mov	r0, r3
 8000168:	3714      	adds	r7, #20
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr

08000170 <_ZN8CppClass3addEii>:

int CppClass::add(int x, int y)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	60f8      	str	r0, [r7, #12]
 8000178:	60b9      	str	r1, [r7, #8]
 800017a:	607a      	str	r2, [r7, #4]
    r1 =  x + y;
 800017c:	68ba      	ldr	r2, [r7, #8]
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	441a      	add	r2, r3
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	601a      	str	r2, [r3, #0]
    return r1;
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	681b      	ldr	r3, [r3, #0]
}
 800018a:	4618      	mov	r0, r3
 800018c:	3714      	adds	r7, #20
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <_ZN8CppClass9getResultEPi>:
    return r2;
}


int CppClass::getResult(int* result)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
 800019c:	6039      	str	r1, [r7, #0]
    return r1;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	681b      	ldr	r3, [r3, #0]
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001ac:	b480      	push	{r7}
 80001ae:	b083      	sub	sp, #12
 80001b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001b2:	4b0e      	ldr	r3, [pc, #56]	; (80001ec <MX_GPIO_Init+0x40>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	4a0d      	ldr	r2, [pc, #52]	; (80001ec <MX_GPIO_Init+0x40>)
 80001b8:	f043 0320 	orr.w	r3, r3, #32
 80001bc:	6193      	str	r3, [r2, #24]
 80001be:	4b0b      	ldr	r3, [pc, #44]	; (80001ec <MX_GPIO_Init+0x40>)
 80001c0:	699b      	ldr	r3, [r3, #24]
 80001c2:	f003 0320 	and.w	r3, r3, #32
 80001c6:	607b      	str	r3, [r7, #4]
 80001c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <MX_GPIO_Init+0x40>)
 80001cc:	699b      	ldr	r3, [r3, #24]
 80001ce:	4a07      	ldr	r2, [pc, #28]	; (80001ec <MX_GPIO_Init+0x40>)
 80001d0:	f043 0304 	orr.w	r3, r3, #4
 80001d4:	6193      	str	r3, [r2, #24]
 80001d6:	4b05      	ldr	r3, [pc, #20]	; (80001ec <MX_GPIO_Init+0x40>)
 80001d8:	699b      	ldr	r3, [r3, #24]
 80001da:	f003 0304 	and.w	r3, r3, #4
 80001de:	603b      	str	r3, [r7, #0]
 80001e0:	683b      	ldr	r3, [r7, #0]

}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	40021000 	.word	0x40021000

080001f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  CppClass myCppClass(0,0.0);
 80001f6:	f107 0308 	add.w	r3, r7, #8
 80001fa:	f04f 0200 	mov.w	r2, #0
 80001fe:	2100      	movs	r1, #0
 8000200:	4618      	mov	r0, r3
 8000202:	f7ff ffa3 	bl	800014c <_ZN8CppClassC1Eif>
  myCppClass.add(3,5);
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	2205      	movs	r2, #5
 800020c:	2103      	movs	r1, #3
 800020e:	4618      	mov	r0, r3
 8000210:	f7ff ffae 	bl	8000170 <_ZN8CppClass3addEii>
  int result;
  myCppClass.getResult(&result);
 8000214:	1d3a      	adds	r2, r7, #4
 8000216:	f107 0308 	add.w	r3, r7, #8
 800021a:	4611      	mov	r1, r2
 800021c:	4618      	mov	r0, r3
 800021e:	f7ff ffb9 	bl	8000194 <_ZN8CppClass9getResultEPi>
  printf("results is %d", myCppClass.add(3,5));
 8000222:	f107 0308 	add.w	r3, r7, #8
 8000226:	2205      	movs	r2, #5
 8000228:	2103      	movs	r1, #3
 800022a:	4618      	mov	r0, r3
 800022c:	f7ff ffa0 	bl	8000170 <_ZN8CppClass3addEii>
 8000230:	4603      	mov	r3, r0
 8000232:	4619      	mov	r1, r3
 8000234:	4805      	ldr	r0, [pc, #20]	; (800024c <main+0x5c>)
 8000236:	f001 f9d1 	bl	80015dc <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 f9e5 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f807 	bl	8000250 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f7ff ffb3 	bl	80001ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000246:	f000 f945 	bl	80004d4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024a:	e7fe      	b.n	800024a <main+0x5a>
 800024c:	0800251c 	.word	0x0800251c

08000250 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b090      	sub	sp, #64	; 0x40
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2228      	movs	r2, #40	; 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f001 f9b4 	bl	80015cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000272:	2301      	movs	r3, #1
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000284:	2302      	movs	r3, #2
 8000286:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800028e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000292:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fc7f 	bl	8000b9c <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	bf14      	ite	ne
 80002a4:	2301      	movne	r3, #1
 80002a6:	2300      	moveq	r3, #0
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80002ae:	f000 f81d 	bl	80002ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2302      	movs	r3, #2
 80002b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fee8 	bl	80010a0 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	bf14      	ite	ne
 80002d6:	2301      	movne	r3, #1
 80002d8:	2300      	moveq	r3, #0
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 80002e0:	f000 f804 	bl	80002ec <Error_Handler>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3740      	adds	r7, #64	; 0x40
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f0:	b672      	cpsid	i
}
 80002f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <Error_Handler+0x8>
	...

080002f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <HAL_MspInit+0x40>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <HAL_MspInit+0x40>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6193      	str	r3, [r2, #24]
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <HAL_MspInit+0x40>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <HAL_MspInit+0x40>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <HAL_MspInit+0x40>)
 800031c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000320:	61d3      	str	r3, [r2, #28]
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <HAL_MspInit+0x40>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800032a:	603b      	str	r3, [r7, #0]
 800032c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000

0800033c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000340:	e7fe      	b.n	8000340 <NMI_Handler+0x4>

08000342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000346:	e7fe      	b.n	8000346 <HardFault_Handler+0x4>

08000348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800034c:	e7fe      	b.n	800034c <MemManage_Handler+0x4>

0800034e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000352:	e7fe      	b.n	8000352 <BusFault_Handler+0x4>

08000354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000358:	e7fe      	b.n	8000358 <UsageFault_Handler+0x4>

0800035a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr

08000366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr

08000372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr

0800037e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000382:	f000 f987 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}

0800038a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	b086      	sub	sp, #24
 800038e:	af00      	add	r7, sp, #0
 8000390:	60f8      	str	r0, [r7, #12]
 8000392:	60b9      	str	r1, [r7, #8]
 8000394:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
 800039a:	e00a      	b.n	80003b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800039c:	f3af 8000 	nop.w
 80003a0:	4601      	mov	r1, r0
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	1c5a      	adds	r2, r3, #1
 80003a6:	60ba      	str	r2, [r7, #8]
 80003a8:	b2ca      	uxtb	r2, r1
 80003aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	3301      	adds	r3, #1
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	697a      	ldr	r2, [r7, #20]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	dbf0      	blt.n	800039c <_read+0x12>
  }

  return len;
 80003ba:	687b      	ldr	r3, [r7, #4]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	3718      	adds	r7, #24
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
 80003d4:	e009      	b.n	80003ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	60ba      	str	r2, [r7, #8]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	4618      	mov	r0, r3
 80003e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	3301      	adds	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	697a      	ldr	r2, [r7, #20]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	dbf1      	blt.n	80003d6 <_write+0x12>
  }
  return len;
 80003f2:	687b      	ldr	r3, [r7, #4]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <_close>:

int _close(int file)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000408:	4618      	mov	r0, r3
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr

08000412 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000422:	605a      	str	r2, [r3, #4]
  return 0;
 8000424:	2300      	movs	r3, #0
}
 8000426:	4618      	mov	r0, r3
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <_isatty>:

int _isatty(int file)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000438:	2301      	movs	r3, #1
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000450:	2300      	movs	r3, #0
}
 8000452:	4618      	mov	r0, r3
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000464:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <_sbrk+0x5c>)
 8000466:	4b15      	ldr	r3, [pc, #84]	; (80004bc <_sbrk+0x60>)
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <_sbrk+0x64>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d102      	bne.n	800047e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <_sbrk+0x64>)
 800047a:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <_sbrk+0x68>)
 800047c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <_sbrk+0x64>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	693a      	ldr	r2, [r7, #16]
 8000488:	429a      	cmp	r2, r3
 800048a:	d207      	bcs.n	800049c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800048c:	f001 f874 	bl	8001578 <__errno>
 8000490:	4603      	mov	r3, r0
 8000492:	220c      	movs	r2, #12
 8000494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000496:	f04f 33ff 	mov.w	r3, #4294967295
 800049a:	e009      	b.n	80004b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <_sbrk+0x64>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <_sbrk+0x64>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4413      	add	r3, r2
 80004aa:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <_sbrk+0x64>)
 80004ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ae:	68fb      	ldr	r3, [r7, #12]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3718      	adds	r7, #24
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20005000 	.word	0x20005000
 80004bc:	00000400 	.word	0x00000400
 80004c0:	2000008c 	.word	0x2000008c
 80004c4:	200000f0 	.word	0x200000f0

080004c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004da:	4a12      	ldr	r2, [pc, #72]	; (8000524 <MX_USART2_UART_Init+0x50>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 800050c:	f000 ff56 	bl	80013bc <HAL_UART_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000516:	f7ff fee9 	bl	80002ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000090 	.word	0x20000090
 8000524:	40004400 	.word	0x40004400

08000528 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a1b      	ldr	r2, [pc, #108]	; (80005b0 <HAL_UART_MspInit+0x88>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d12f      	bne.n	80005a8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000548:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <HAL_UART_MspInit+0x8c>)
 800054a:	69db      	ldr	r3, [r3, #28]
 800054c:	4a19      	ldr	r2, [pc, #100]	; (80005b4 <HAL_UART_MspInit+0x8c>)
 800054e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000552:	61d3      	str	r3, [r2, #28]
 8000554:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <HAL_UART_MspInit+0x8c>)
 8000556:	69db      	ldr	r3, [r3, #28]
 8000558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <HAL_UART_MspInit+0x8c>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <HAL_UART_MspInit+0x8c>)
 8000566:	f043 0304 	orr.w	r3, r3, #4
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <HAL_UART_MspInit+0x8c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0304 	and.w	r3, r3, #4
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000578:	2304      	movs	r3, #4
 800057a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057c:	2302      	movs	r3, #2
 800057e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000580:	2303      	movs	r3, #3
 8000582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	4619      	mov	r1, r3
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <HAL_UART_MspInit+0x90>)
 800058c:	f000 f982 	bl	8000894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000590:	2308      	movs	r3, #8
 8000592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	4619      	mov	r1, r3
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <HAL_UART_MspInit+0x90>)
 80005a4:	f000 f976 	bl	8000894 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40004400 	.word	0x40004400
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010800 	.word	0x40010800

080005bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005bc:	f7ff ff84 	bl	80004c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005c2:	490c      	ldr	r1, [pc, #48]	; (80005f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005c4:	4a0c      	ldr	r2, [pc, #48]	; (80005f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005d8:	4c09      	ldr	r4, [pc, #36]	; (8000600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005e6:	f000 ffcd 	bl	8001584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ea:	f7ff fe01 	bl	80001f0 <main>
  bx lr
 80005ee:	4770      	bx	lr
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005f8:	080025f8 	.word	0x080025f8
  ldr r2, =_sbss
 80005fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000600:	200000ec 	.word	0x200000ec

08000604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_2_IRQHandler>
	...

08000608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_Init+0x28>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_Init+0x28>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f907 	bl	800082c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061e:	200f      	movs	r0, #15
 8000620:	f000 f808 	bl	8000634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000624:	f7ff fe68 	bl	80002f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40022000 	.word	0x40022000

08000634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_InitTick+0x54>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_InitTick+0x58>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	fbb3 f3f1 	udiv	r3, r3, r1
 800064e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f911 	bl	800087a <HAL_SYSTICK_Config>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e00e      	b.n	8000680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d80a      	bhi.n	800067e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000668:	2200      	movs	r2, #0
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f000 f8e7 	bl	8000842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000674:	4a06      	ldr	r2, [pc, #24]	; (8000690 <HAL_InitTick+0x5c>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800067a:	2300      	movs	r3, #0
 800067c:	e000      	b.n	8000680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000000 	.word	0x20000000
 800068c:	20000008 	.word	0x20000008
 8000690:	20000004 	.word	0x20000004

08000694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_IncTick+0x1c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_IncTick+0x20>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <HAL_IncTick+0x20>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	20000008 	.word	0x20000008
 80006b4:	200000d8 	.word	0x200000d8

080006b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return uwTick;
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <HAL_GetTick+0x10>)
 80006be:	681b      	ldr	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	200000d8 	.word	0x200000d8

080006cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	60d3      	str	r3, [r2, #12]
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <__NVIC_GetPriorityGrouping+0x18>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	f003 0307 	and.w	r3, r3, #7
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db0a      	blt.n	800075a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	b2da      	uxtb	r2, r3
 8000748:	490c      	ldr	r1, [pc, #48]	; (800077c <__NVIC_SetPriority+0x4c>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	0112      	lsls	r2, r2, #4
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	440b      	add	r3, r1
 8000754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000758:	e00a      	b.n	8000770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4908      	ldr	r1, [pc, #32]	; (8000780 <__NVIC_SetPriority+0x50>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	3b04      	subs	r3, #4
 8000768:	0112      	lsls	r2, r2, #4
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	440b      	add	r3, r1
 800076e:	761a      	strb	r2, [r3, #24]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e100 	.word	0xe000e100
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000784:	b480      	push	{r7}
 8000786:	b089      	sub	sp, #36	; 0x24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	f1c3 0307 	rsb	r3, r3, #7
 800079e:	2b04      	cmp	r3, #4
 80007a0:	bf28      	it	cs
 80007a2:	2304      	movcs	r3, #4
 80007a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3304      	adds	r3, #4
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d902      	bls.n	80007b4 <NVIC_EncodePriority+0x30>
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3b03      	subs	r3, #3
 80007b2:	e000      	b.n	80007b6 <NVIC_EncodePriority+0x32>
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	f04f 32ff 	mov.w	r2, #4294967295
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	43da      	mvns	r2, r3
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	401a      	ands	r2, r3
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007cc:	f04f 31ff 	mov.w	r1, #4294967295
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	43d9      	mvns	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	4313      	orrs	r3, r2
         );
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3724      	adds	r7, #36	; 0x24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f8:	d301      	bcc.n	80007fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00f      	b.n	800081e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <SysTick_Config+0x40>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000806:	210f      	movs	r1, #15
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f7ff ff90 	bl	8000730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <SysTick_Config+0x40>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <SysTick_Config+0x40>)
 8000818:	2207      	movs	r2, #7
 800081a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	e000e010 	.word	0xe000e010

0800082c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ff49 	bl	80006cc <__NVIC_SetPriorityGrouping>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	4603      	mov	r3, r0
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000854:	f7ff ff5e 	bl	8000714 <__NVIC_GetPriorityGrouping>
 8000858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	6978      	ldr	r0, [r7, #20]
 8000860:	f7ff ff90 	bl	8000784 <NVIC_EncodePriority>
 8000864:	4602      	mov	r2, r0
 8000866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff5f 	bl	8000730 <__NVIC_SetPriority>
}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ffb0 	bl	80007e8 <SysTick_Config>
 8000888:	4603      	mov	r3, r0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000894:	b480      	push	{r7}
 8000896:	b08b      	sub	sp, #44	; 0x2c
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a6:	e169      	b.n	8000b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008a8:	2201      	movs	r2, #1
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	69fa      	ldr	r2, [r7, #28]
 80008b8:	4013      	ands	r3, r2
 80008ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	f040 8158 	bne.w	8000b76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	4a9a      	ldr	r2, [pc, #616]	; (8000b34 <HAL_GPIO_Init+0x2a0>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d05e      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 80008d0:	4a98      	ldr	r2, [pc, #608]	; (8000b34 <HAL_GPIO_Init+0x2a0>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d875      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 80008d6:	4a98      	ldr	r2, [pc, #608]	; (8000b38 <HAL_GPIO_Init+0x2a4>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d058      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 80008dc:	4a96      	ldr	r2, [pc, #600]	; (8000b38 <HAL_GPIO_Init+0x2a4>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d86f      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 80008e2:	4a96      	ldr	r2, [pc, #600]	; (8000b3c <HAL_GPIO_Init+0x2a8>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d052      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 80008e8:	4a94      	ldr	r2, [pc, #592]	; (8000b3c <HAL_GPIO_Init+0x2a8>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d869      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 80008ee:	4a94      	ldr	r2, [pc, #592]	; (8000b40 <HAL_GPIO_Init+0x2ac>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d04c      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 80008f4:	4a92      	ldr	r2, [pc, #584]	; (8000b40 <HAL_GPIO_Init+0x2ac>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d863      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 80008fa:	4a92      	ldr	r2, [pc, #584]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d046      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 8000900:	4a90      	ldr	r2, [pc, #576]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d85d      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 8000906:	2b12      	cmp	r3, #18
 8000908:	d82a      	bhi.n	8000960 <HAL_GPIO_Init+0xcc>
 800090a:	2b12      	cmp	r3, #18
 800090c:	d859      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 800090e:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <HAL_GPIO_Init+0x80>)
 8000910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000914:	0800098f 	.word	0x0800098f
 8000918:	08000969 	.word	0x08000969
 800091c:	0800097b 	.word	0x0800097b
 8000920:	080009bd 	.word	0x080009bd
 8000924:	080009c3 	.word	0x080009c3
 8000928:	080009c3 	.word	0x080009c3
 800092c:	080009c3 	.word	0x080009c3
 8000930:	080009c3 	.word	0x080009c3
 8000934:	080009c3 	.word	0x080009c3
 8000938:	080009c3 	.word	0x080009c3
 800093c:	080009c3 	.word	0x080009c3
 8000940:	080009c3 	.word	0x080009c3
 8000944:	080009c3 	.word	0x080009c3
 8000948:	080009c3 	.word	0x080009c3
 800094c:	080009c3 	.word	0x080009c3
 8000950:	080009c3 	.word	0x080009c3
 8000954:	080009c3 	.word	0x080009c3
 8000958:	08000971 	.word	0x08000971
 800095c:	08000985 	.word	0x08000985
 8000960:	4a79      	ldr	r2, [pc, #484]	; (8000b48 <HAL_GPIO_Init+0x2b4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d013      	beq.n	800098e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000966:	e02c      	b.n	80009c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	623b      	str	r3, [r7, #32]
          break;
 800096e:	e029      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	3304      	adds	r3, #4
 8000976:	623b      	str	r3, [r7, #32]
          break;
 8000978:	e024      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	3308      	adds	r3, #8
 8000980:	623b      	str	r3, [r7, #32]
          break;
 8000982:	e01f      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	330c      	adds	r3, #12
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	e01a      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d102      	bne.n	800099c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000996:	2304      	movs	r3, #4
 8000998:	623b      	str	r3, [r7, #32]
          break;
 800099a:	e013      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d105      	bne.n	80009b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a4:	2308      	movs	r3, #8
 80009a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69fa      	ldr	r2, [r7, #28]
 80009ac:	611a      	str	r2, [r3, #16]
          break;
 80009ae:	e009      	b.n	80009c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b0:	2308      	movs	r3, #8
 80009b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	615a      	str	r2, [r3, #20]
          break;
 80009ba:	e003      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
          break;
 80009c0:	e000      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          break;
 80009c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	2bff      	cmp	r3, #255	; 0xff
 80009c8:	d801      	bhi.n	80009ce <HAL_GPIO_Init+0x13a>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	e001      	b.n	80009d2 <HAL_GPIO_Init+0x13e>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3304      	adds	r3, #4
 80009d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	2bff      	cmp	r3, #255	; 0xff
 80009d8:	d802      	bhi.n	80009e0 <HAL_GPIO_Init+0x14c>
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	e002      	b.n	80009e6 <HAL_GPIO_Init+0x152>
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	3b08      	subs	r3, #8
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	210f      	movs	r1, #15
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	401a      	ands	r2, r3
 80009f8:	6a39      	ldr	r1, [r7, #32]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000a00:	431a      	orrs	r2, r3
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f000 80b1 	beq.w	8000b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a14:	4b4d      	ldr	r3, [pc, #308]	; (8000b4c <HAL_GPIO_Init+0x2b8>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a4c      	ldr	r2, [pc, #304]	; (8000b4c <HAL_GPIO_Init+0x2b8>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b4a      	ldr	r3, [pc, #296]	; (8000b4c <HAL_GPIO_Init+0x2b8>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a2c:	4a48      	ldr	r2, [pc, #288]	; (8000b50 <HAL_GPIO_Init+0x2bc>)
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	f003 0303 	and.w	r3, r3, #3
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	220f      	movs	r2, #15
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a40      	ldr	r2, [pc, #256]	; (8000b54 <HAL_GPIO_Init+0x2c0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d013      	beq.n	8000a80 <HAL_GPIO_Init+0x1ec>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a3f      	ldr	r2, [pc, #252]	; (8000b58 <HAL_GPIO_Init+0x2c4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d00d      	beq.n	8000a7c <HAL_GPIO_Init+0x1e8>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a3e      	ldr	r2, [pc, #248]	; (8000b5c <HAL_GPIO_Init+0x2c8>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d007      	beq.n	8000a78 <HAL_GPIO_Init+0x1e4>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a3d      	ldr	r2, [pc, #244]	; (8000b60 <HAL_GPIO_Init+0x2cc>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d101      	bne.n	8000a74 <HAL_GPIO_Init+0x1e0>
 8000a70:	2303      	movs	r3, #3
 8000a72:	e006      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a74:	2304      	movs	r3, #4
 8000a76:	e004      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a78:	2302      	movs	r3, #2
 8000a7a:	e002      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e000      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a80:	2300      	movs	r3, #0
 8000a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a84:	f002 0203 	and.w	r2, r2, #3
 8000a88:	0092      	lsls	r2, r2, #2
 8000a8a:	4093      	lsls	r3, r2
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a92:	492f      	ldr	r1, [pc, #188]	; (8000b50 <HAL_GPIO_Init+0x2bc>)
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	3302      	adds	r3, #2
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d006      	beq.n	8000aba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aac:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	492c      	ldr	r1, [pc, #176]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	608b      	str	r3, [r1, #8]
 8000ab8:	e006      	b.n	8000ac8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aba:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	4928      	ldr	r1, [pc, #160]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d006      	beq.n	8000ae2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ad4:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	4922      	ldr	r1, [pc, #136]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	60cb      	str	r3, [r1, #12]
 8000ae0:	e006      	b.n	8000af0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000ae4:	68da      	ldr	r2, [r3, #12]
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	491e      	ldr	r1, [pc, #120]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000aec:	4013      	ands	r3, r2
 8000aee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d006      	beq.n	8000b0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	4918      	ldr	r1, [pc, #96]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	604b      	str	r3, [r1, #4]
 8000b08:	e006      	b.n	8000b18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	4914      	ldr	r1, [pc, #80]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d021      	beq.n	8000b68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	490e      	ldr	r1, [pc, #56]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	600b      	str	r3, [r1, #0]
 8000b30:	e021      	b.n	8000b76 <HAL_GPIO_Init+0x2e2>
 8000b32:	bf00      	nop
 8000b34:	10320000 	.word	0x10320000
 8000b38:	10310000 	.word	0x10310000
 8000b3c:	10220000 	.word	0x10220000
 8000b40:	10210000 	.word	0x10210000
 8000b44:	10120000 	.word	0x10120000
 8000b48:	10110000 	.word	0x10110000
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010000 	.word	0x40010000
 8000b54:	40010800 	.word	0x40010800
 8000b58:	40010c00 	.word	0x40010c00
 8000b5c:	40011000 	.word	0x40011000
 8000b60:	40011400 	.word	0x40011400
 8000b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_GPIO_Init+0x304>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	4909      	ldr	r1, [pc, #36]	; (8000b98 <HAL_GPIO_Init+0x304>)
 8000b72:	4013      	ands	r3, r2
 8000b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	3301      	adds	r3, #1
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	fa22 f303 	lsr.w	r3, r2, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f47f ae8e 	bne.w	80008a8 <HAL_GPIO_Init+0x14>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	372c      	adds	r7, #44	; 0x2c
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	40010400 	.word	0x40010400

08000b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e272      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f000 8087 	beq.w	8000cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bbc:	4b92      	ldr	r3, [pc, #584]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d00c      	beq.n	8000be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bc8:	4b8f      	ldr	r3, [pc, #572]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 030c 	and.w	r3, r3, #12
 8000bd0:	2b08      	cmp	r3, #8
 8000bd2:	d112      	bne.n	8000bfa <HAL_RCC_OscConfig+0x5e>
 8000bd4:	4b8c      	ldr	r3, [pc, #560]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be0:	d10b      	bne.n	8000bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be2:	4b89      	ldr	r3, [pc, #548]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d06c      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x12c>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d168      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e24c      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c02:	d106      	bne.n	8000c12 <HAL_RCC_OscConfig+0x76>
 8000c04:	4b80      	ldr	r3, [pc, #512]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a7f      	ldr	r2, [pc, #508]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	e02e      	b.n	8000c70 <HAL_RCC_OscConfig+0xd4>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10c      	bne.n	8000c34 <HAL_RCC_OscConfig+0x98>
 8000c1a:	4b7b      	ldr	r3, [pc, #492]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a7a      	ldr	r2, [pc, #488]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	4b78      	ldr	r3, [pc, #480]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a77      	ldr	r2, [pc, #476]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e01d      	b.n	8000c70 <HAL_RCC_OscConfig+0xd4>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c3c:	d10c      	bne.n	8000c58 <HAL_RCC_OscConfig+0xbc>
 8000c3e:	4b72      	ldr	r3, [pc, #456]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a71      	ldr	r2, [pc, #452]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	4b6f      	ldr	r3, [pc, #444]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a6e      	ldr	r2, [pc, #440]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e00b      	b.n	8000c70 <HAL_RCC_OscConfig+0xd4>
 8000c58:	4b6b      	ldr	r3, [pc, #428]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a6a      	ldr	r2, [pc, #424]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	4b68      	ldr	r3, [pc, #416]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a67      	ldr	r2, [pc, #412]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d013      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c78:	f7ff fd1e 	bl	80006b8 <HAL_GetTick>
 8000c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7e:	e008      	b.n	8000c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c80:	f7ff fd1a 	bl	80006b8 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b64      	cmp	r3, #100	; 0x64
 8000c8c:	d901      	bls.n	8000c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e200      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c92:	4b5d      	ldr	r3, [pc, #372]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f0      	beq.n	8000c80 <HAL_RCC_OscConfig+0xe4>
 8000c9e:	e014      	b.n	8000cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca0:	f7ff fd0a 	bl	80006b8 <HAL_GetTick>
 8000ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca6:	e008      	b.n	8000cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca8:	f7ff fd06 	bl	80006b8 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b64      	cmp	r3, #100	; 0x64
 8000cb4:	d901      	bls.n	8000cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e1ec      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cba:	4b53      	ldr	r3, [pc, #332]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1f0      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x10c>
 8000cc6:	e000      	b.n	8000cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d063      	beq.n	8000d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cd6:	4b4c      	ldr	r3, [pc, #304]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 030c 	and.w	r3, r3, #12
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00b      	beq.n	8000cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ce2:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 030c 	and.w	r3, r3, #12
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	d11c      	bne.n	8000d28 <HAL_RCC_OscConfig+0x18c>
 8000cee:	4b46      	ldr	r3, [pc, #280]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d116      	bne.n	8000d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cfa:	4b43      	ldr	r3, [pc, #268]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d005      	beq.n	8000d12 <HAL_RCC_OscConfig+0x176>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d001      	beq.n	8000d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e1c0      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d12:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	4939      	ldr	r1, [pc, #228]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d26:	e03a      	b.n	8000d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d020      	beq.n	8000d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d30:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d36:	f7ff fcbf 	bl	80006b8 <HAL_GetTick>
 8000d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3c:	e008      	b.n	8000d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d3e:	f7ff fcbb 	bl	80006b8 <HAL_GetTick>
 8000d42:	4602      	mov	r2, r0
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d901      	bls.n	8000d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e1a1      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d50:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0f0      	beq.n	8000d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	4927      	ldr	r1, [pc, #156]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	600b      	str	r3, [r1, #0]
 8000d70:	e015      	b.n	8000d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <HAL_RCC_OscConfig+0x270>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d78:	f7ff fc9e 	bl	80006b8 <HAL_GetTick>
 8000d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7e:	e008      	b.n	8000d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d80:	f7ff fc9a 	bl	80006b8 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e180      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f0      	bne.n	8000d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d03a      	beq.n	8000e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d019      	beq.n	8000de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_RCC_OscConfig+0x274>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db8:	f7ff fc7e 	bl	80006b8 <HAL_GetTick>
 8000dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dbe:	e008      	b.n	8000dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dc0:	f7ff fc7a 	bl	80006b8 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d901      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e160      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f0      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f000 face 	bl	8001380 <RCC_Delay>
 8000de4:	e01c      	b.n	8000e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_RCC_OscConfig+0x274>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dec:	f7ff fc64 	bl	80006b8 <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df2:	e00f      	b.n	8000e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df4:	f7ff fc60 	bl	80006b8 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d908      	bls.n	8000e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e146      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	42420000 	.word	0x42420000
 8000e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e14:	4b92      	ldr	r3, [pc, #584]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1e9      	bne.n	8000df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 80a6 	beq.w	8000f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e32:	4b8b      	ldr	r3, [pc, #556]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10d      	bne.n	8000e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b88      	ldr	r3, [pc, #544]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a87      	ldr	r2, [pc, #540]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b85      	ldr	r3, [pc, #532]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e56:	2301      	movs	r3, #1
 8000e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5a:	4b82      	ldr	r3, [pc, #520]	; (8001064 <HAL_RCC_OscConfig+0x4c8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d118      	bne.n	8000e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e66:	4b7f      	ldr	r3, [pc, #508]	; (8001064 <HAL_RCC_OscConfig+0x4c8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a7e      	ldr	r2, [pc, #504]	; (8001064 <HAL_RCC_OscConfig+0x4c8>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e72:	f7ff fc21 	bl	80006b8 <HAL_GetTick>
 8000e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e78:	e008      	b.n	8000e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e7a:	f7ff fc1d 	bl	80006b8 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b64      	cmp	r3, #100	; 0x64
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e103      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e8c:	4b75      	ldr	r3, [pc, #468]	; (8001064 <HAL_RCC_OscConfig+0x4c8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0f0      	beq.n	8000e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d106      	bne.n	8000eae <HAL_RCC_OscConfig+0x312>
 8000ea0:	4b6f      	ldr	r3, [pc, #444]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	4a6e      	ldr	r2, [pc, #440]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6213      	str	r3, [r2, #32]
 8000eac:	e02d      	b.n	8000f0a <HAL_RCC_OscConfig+0x36e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10c      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x334>
 8000eb6:	4b6a      	ldr	r3, [pc, #424]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4a69      	ldr	r2, [pc, #420]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	f023 0301 	bic.w	r3, r3, #1
 8000ec0:	6213      	str	r3, [r2, #32]
 8000ec2:	4b67      	ldr	r3, [pc, #412]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	4a66      	ldr	r2, [pc, #408]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000ec8:	f023 0304 	bic.w	r3, r3, #4
 8000ecc:	6213      	str	r3, [r2, #32]
 8000ece:	e01c      	b.n	8000f0a <HAL_RCC_OscConfig+0x36e>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	2b05      	cmp	r3, #5
 8000ed6:	d10c      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x356>
 8000ed8:	4b61      	ldr	r3, [pc, #388]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a60      	ldr	r2, [pc, #384]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	6213      	str	r3, [r2, #32]
 8000ee4:	4b5e      	ldr	r3, [pc, #376]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4a5d      	ldr	r2, [pc, #372]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6213      	str	r3, [r2, #32]
 8000ef0:	e00b      	b.n	8000f0a <HAL_RCC_OscConfig+0x36e>
 8000ef2:	4b5b      	ldr	r3, [pc, #364]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	4a5a      	ldr	r2, [pc, #360]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	f023 0301 	bic.w	r3, r3, #1
 8000efc:	6213      	str	r3, [r2, #32]
 8000efe:	4b58      	ldr	r3, [pc, #352]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4a57      	ldr	r2, [pc, #348]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	f023 0304 	bic.w	r3, r3, #4
 8000f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d015      	beq.n	8000f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f12:	f7ff fbd1 	bl	80006b8 <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f18:	e00a      	b.n	8000f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f1a:	f7ff fbcd 	bl	80006b8 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e0b1      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f30:	4b4b      	ldr	r3, [pc, #300]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0ee      	beq.n	8000f1a <HAL_RCC_OscConfig+0x37e>
 8000f3c:	e014      	b.n	8000f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fbbb 	bl	80006b8 <HAL_GetTick>
 8000f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f44:	e00a      	b.n	8000f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f46:	f7ff fbb7 	bl	80006b8 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e09b      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f5c:	4b40      	ldr	r3, [pc, #256]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1ee      	bne.n	8000f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f68:	7dfb      	ldrb	r3, [r7, #23]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d105      	bne.n	8000f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f6e:	4b3c      	ldr	r3, [pc, #240]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a3b      	ldr	r2, [pc, #236]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 8087 	beq.w	8001092 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f84:	4b36      	ldr	r3, [pc, #216]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d061      	beq.n	8001054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d146      	bne.n	8001026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f98:	4b33      	ldr	r3, [pc, #204]	; (8001068 <HAL_RCC_OscConfig+0x4cc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9e:	f7ff fb8b 	bl	80006b8 <HAL_GetTick>
 8000fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa4:	e008      	b.n	8000fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fa6:	f7ff fb87 	bl	80006b8 <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e06d      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb8:	4b29      	ldr	r3, [pc, #164]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f0      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fcc:	d108      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fce:	4b24      	ldr	r3, [pc, #144]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	4921      	ldr	r1, [pc, #132]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a19      	ldr	r1, [r3, #32]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	491b      	ldr	r1, [pc, #108]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_RCC_OscConfig+0x4cc>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fb5b 	bl	80006b8 <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001006:	f7ff fb57 	bl	80006b8 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e03d      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0f0      	beq.n	8001006 <HAL_RCC_OscConfig+0x46a>
 8001024:	e035      	b.n	8001092 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HAL_RCC_OscConfig+0x4cc>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fb44 	bl	80006b8 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001034:	f7ff fb40 	bl	80006b8 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e026      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x498>
 8001052:	e01e      	b.n	8001092 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d107      	bne.n	800106c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e019      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
 8001060:	40021000 	.word	0x40021000
 8001064:	40007000 	.word	0x40007000
 8001068:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_RCC_OscConfig+0x500>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	429a      	cmp	r2, r3
 800107e:	d106      	bne.n	800108e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108a:	429a      	cmp	r2, r3
 800108c:	d001      	beq.n	8001092 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000

080010a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e0d0      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010b4:	4b6a      	ldr	r3, [pc, #424]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d910      	bls.n	80010e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c2:	4b67      	ldr	r3, [pc, #412]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 0207 	bic.w	r2, r3, #7
 80010ca:	4965      	ldr	r1, [pc, #404]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d2:	4b63      	ldr	r3, [pc, #396]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d001      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e0b8      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d020      	beq.n	8001132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010fc:	4b59      	ldr	r3, [pc, #356]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a58      	ldr	r2, [pc, #352]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a52      	ldr	r2, [pc, #328]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800111e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001120:	4b50      	ldr	r3, [pc, #320]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	494d      	ldr	r1, [pc, #308]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	4313      	orrs	r3, r2
 8001130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d040      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d107      	bne.n	8001156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	4b47      	ldr	r3, [pc, #284]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d115      	bne.n	800117e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e07f      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b02      	cmp	r3, #2
 800115c:	d107      	bne.n	800116e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800115e:	4b41      	ldr	r3, [pc, #260]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d109      	bne.n	800117e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e073      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116e:	4b3d      	ldr	r3, [pc, #244]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e06b      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800117e:	4b39      	ldr	r3, [pc, #228]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f023 0203 	bic.w	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	4936      	ldr	r1, [pc, #216]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	4313      	orrs	r3, r2
 800118e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001190:	f7ff fa92 	bl	80006b8 <HAL_GetTick>
 8001194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001196:	e00a      	b.n	80011ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001198:	f7ff fa8e 	bl	80006b8 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e053      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 020c 	and.w	r2, r3, #12
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	429a      	cmp	r2, r3
 80011be:	d1eb      	bne.n	8001198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d210      	bcs.n	80011f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 0207 	bic.w	r2, r3, #7
 80011d6:	4922      	ldr	r1, [pc, #136]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_RCC_ClockConfig+0x1c0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e032      	b.n	8001256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4916      	ldr	r1, [pc, #88]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	4313      	orrs	r3, r2
 800120c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d009      	beq.n	800122e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	490e      	ldr	r1, [pc, #56]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800122e:	f000 f821 	bl	8001274 <HAL_RCC_GetSysClockFreq>
 8001232:	4602      	mov	r2, r0
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	490a      	ldr	r1, [pc, #40]	; (8001268 <HAL_RCC_ClockConfig+0x1c8>)
 8001240:	5ccb      	ldrb	r3, [r1, r3]
 8001242:	fa22 f303 	lsr.w	r3, r2, r3
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <HAL_RCC_ClockConfig+0x1cc>)
 8001248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_RCC_ClockConfig+0x1d0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f9f0 	bl	8000634 <HAL_InitTick>

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000
 8001264:	40021000 	.word	0x40021000
 8001268:	0800252c 	.word	0x0800252c
 800126c:	20000000 	.word	0x20000000
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <HAL_RCC_GetSysClockFreq+0x94>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b04      	cmp	r3, #4
 800129c:	d002      	beq.n	80012a4 <HAL_RCC_GetSysClockFreq+0x30>
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d003      	beq.n	80012aa <HAL_RCC_GetSysClockFreq+0x36>
 80012a2:	e027      	b.n	80012f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_RCC_GetSysClockFreq+0x98>)
 80012a6:	613b      	str	r3, [r7, #16]
      break;
 80012a8:	e027      	b.n	80012fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	0c9b      	lsrs	r3, r3, #18
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012b4:	5cd3      	ldrb	r3, [r2, r3]
 80012b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d010      	beq.n	80012e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_RCC_GetSysClockFreq+0x94>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	0c5b      	lsrs	r3, r3, #17
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012ce:	5cd3      	ldrb	r3, [r2, r3]
 80012d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <HAL_RCC_GetSysClockFreq+0x98>)
 80012d6:	fb03 f202 	mul.w	r2, r3, r2
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e004      	b.n	80012ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	613b      	str	r3, [r7, #16]
      break;
 80012f2:	e002      	b.n	80012fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_RCC_GetSysClockFreq+0x98>)
 80012f6:	613b      	str	r3, [r7, #16]
      break;
 80012f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012fa:	693b      	ldr	r3, [r7, #16]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	371c      	adds	r7, #28
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	007a1200 	.word	0x007a1200
 8001310:	08002544 	.word	0x08002544
 8001314:	08002554 	.word	0x08002554
 8001318:	003d0900 	.word	0x003d0900

0800131c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <HAL_RCC_GetHCLKFreq+0x10>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	20000000 	.word	0x20000000

08001330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001334:	f7ff fff2 	bl	800131c <HAL_RCC_GetHCLKFreq>
 8001338:	4602      	mov	r2, r0
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	0a1b      	lsrs	r3, r3, #8
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	4903      	ldr	r1, [pc, #12]	; (8001354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001346:	5ccb      	ldrb	r3, [r1, r3]
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800134c:	4618      	mov	r0, r3
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40021000 	.word	0x40021000
 8001354:	0800253c 	.word	0x0800253c

08001358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800135c:	f7ff ffde 	bl	800131c <HAL_RCC_GetHCLKFreq>
 8001360:	4602      	mov	r2, r0
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	0adb      	lsrs	r3, r3, #11
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	4903      	ldr	r1, [pc, #12]	; (800137c <HAL_RCC_GetPCLK2Freq+0x24>)
 800136e:	5ccb      	ldrb	r3, [r1, r3]
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001374:	4618      	mov	r0, r3
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000
 800137c:	0800253c 	.word	0x0800253c

08001380 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <RCC_Delay+0x34>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <RCC_Delay+0x38>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	0a5b      	lsrs	r3, r3, #9
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800139c:	bf00      	nop
  }
  while (Delay --);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	1e5a      	subs	r2, r3, #1
 80013a2:	60fa      	str	r2, [r7, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1f9      	bne.n	800139c <RCC_Delay+0x1c>
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000000 	.word	0x20000000
 80013b8:	10624dd3 	.word	0x10624dd3

080013bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e042      	b.n	8001454 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d106      	bne.n	80013e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff f8a0 	bl	8000528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2224      	movs	r2, #36	; 0x24
 80013ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f82b 	bl	800145c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695a      	ldr	r2, [r3, #20]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2220      	movs	r2, #32
 8001440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2220      	movs	r2, #32
 8001448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	4313      	orrs	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001496:	f023 030c 	bic.w	r3, r3, #12
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	68b9      	ldr	r1, [r7, #8]
 80014a0:	430b      	orrs	r3, r1
 80014a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699a      	ldr	r2, [r3, #24]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a2c      	ldr	r2, [pc, #176]	; (8001570 <UART_SetConfig+0x114>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d103      	bne.n	80014cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80014c4:	f7ff ff48 	bl	8001358 <HAL_RCC_GetPCLK2Freq>
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	e002      	b.n	80014d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80014cc:	f7ff ff30 	bl	8001330 <HAL_RCC_GetPCLK1Freq>
 80014d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009a      	lsls	r2, r3, #2
 80014dc:	441a      	add	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e8:	4a22      	ldr	r2, [pc, #136]	; (8001574 <UART_SetConfig+0x118>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	0119      	lsls	r1, r3, #4
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	009a      	lsls	r2, r3, #2
 80014fc:	441a      	add	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	fbb2 f2f3 	udiv	r2, r2, r3
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <UART_SetConfig+0x118>)
 800150a:	fba3 0302 	umull	r0, r3, r3, r2
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2064      	movs	r0, #100	; 0x64
 8001512:	fb00 f303 	mul.w	r3, r0, r3
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	3332      	adds	r3, #50	; 0x32
 800151c:	4a15      	ldr	r2, [pc, #84]	; (8001574 <UART_SetConfig+0x118>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001528:	4419      	add	r1, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	009a      	lsls	r2, r3, #2
 8001534:	441a      	add	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <UART_SetConfig+0x118>)
 8001542:	fba3 0302 	umull	r0, r3, r3, r2
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2064      	movs	r0, #100	; 0x64
 800154a:	fb00 f303 	mul.w	r3, r0, r3
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	3332      	adds	r3, #50	; 0x32
 8001554:	4a07      	ldr	r2, [pc, #28]	; (8001574 <UART_SetConfig+0x118>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	f003 020f 	and.w	r2, r3, #15
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	440a      	add	r2, r1
 8001566:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40013800 	.word	0x40013800
 8001574:	51eb851f 	.word	0x51eb851f

08001578 <__errno>:
 8001578:	4b01      	ldr	r3, [pc, #4]	; (8001580 <__errno+0x8>)
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	2000000c 	.word	0x2000000c

08001584 <__libc_init_array>:
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	2600      	movs	r6, #0
 8001588:	4d0c      	ldr	r5, [pc, #48]	; (80015bc <__libc_init_array+0x38>)
 800158a:	4c0d      	ldr	r4, [pc, #52]	; (80015c0 <__libc_init_array+0x3c>)
 800158c:	1b64      	subs	r4, r4, r5
 800158e:	10a4      	asrs	r4, r4, #2
 8001590:	42a6      	cmp	r6, r4
 8001592:	d109      	bne.n	80015a8 <__libc_init_array+0x24>
 8001594:	f000 ffb6 	bl	8002504 <_init>
 8001598:	2600      	movs	r6, #0
 800159a:	4d0a      	ldr	r5, [pc, #40]	; (80015c4 <__libc_init_array+0x40>)
 800159c:	4c0a      	ldr	r4, [pc, #40]	; (80015c8 <__libc_init_array+0x44>)
 800159e:	1b64      	subs	r4, r4, r5
 80015a0:	10a4      	asrs	r4, r4, #2
 80015a2:	42a6      	cmp	r6, r4
 80015a4:	d105      	bne.n	80015b2 <__libc_init_array+0x2e>
 80015a6:	bd70      	pop	{r4, r5, r6, pc}
 80015a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ac:	4798      	blx	r3
 80015ae:	3601      	adds	r6, #1
 80015b0:	e7ee      	b.n	8001590 <__libc_init_array+0xc>
 80015b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015b6:	4798      	blx	r3
 80015b8:	3601      	adds	r6, #1
 80015ba:	e7f2      	b.n	80015a2 <__libc_init_array+0x1e>
 80015bc:	080025f0 	.word	0x080025f0
 80015c0:	080025f0 	.word	0x080025f0
 80015c4:	080025f0 	.word	0x080025f0
 80015c8:	080025f4 	.word	0x080025f4

080015cc <memset>:
 80015cc:	4603      	mov	r3, r0
 80015ce:	4402      	add	r2, r0
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d100      	bne.n	80015d6 <memset+0xa>
 80015d4:	4770      	bx	lr
 80015d6:	f803 1b01 	strb.w	r1, [r3], #1
 80015da:	e7f9      	b.n	80015d0 <memset+0x4>

080015dc <iprintf>:
 80015dc:	b40f      	push	{r0, r1, r2, r3}
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <iprintf+0x2c>)
 80015e0:	b513      	push	{r0, r1, r4, lr}
 80015e2:	681c      	ldr	r4, [r3, #0]
 80015e4:	b124      	cbz	r4, 80015f0 <iprintf+0x14>
 80015e6:	69a3      	ldr	r3, [r4, #24]
 80015e8:	b913      	cbnz	r3, 80015f0 <iprintf+0x14>
 80015ea:	4620      	mov	r0, r4
 80015ec:	f000 f866 	bl	80016bc <__sinit>
 80015f0:	ab05      	add	r3, sp, #20
 80015f2:	4620      	mov	r0, r4
 80015f4:	9a04      	ldr	r2, [sp, #16]
 80015f6:	68a1      	ldr	r1, [r4, #8]
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	f000 f9bb 	bl	8001974 <_vfiprintf_r>
 80015fe:	b002      	add	sp, #8
 8001600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001604:	b004      	add	sp, #16
 8001606:	4770      	bx	lr
 8001608:	2000000c 	.word	0x2000000c

0800160c <std>:
 800160c:	2300      	movs	r3, #0
 800160e:	b510      	push	{r4, lr}
 8001610:	4604      	mov	r4, r0
 8001612:	e9c0 3300 	strd	r3, r3, [r0]
 8001616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800161a:	6083      	str	r3, [r0, #8]
 800161c:	8181      	strh	r1, [r0, #12]
 800161e:	6643      	str	r3, [r0, #100]	; 0x64
 8001620:	81c2      	strh	r2, [r0, #14]
 8001622:	6183      	str	r3, [r0, #24]
 8001624:	4619      	mov	r1, r3
 8001626:	2208      	movs	r2, #8
 8001628:	305c      	adds	r0, #92	; 0x5c
 800162a:	f7ff ffcf 	bl	80015cc <memset>
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <std+0x38>)
 8001630:	6224      	str	r4, [r4, #32]
 8001632:	6263      	str	r3, [r4, #36]	; 0x24
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <std+0x3c>)
 8001636:	62a3      	str	r3, [r4, #40]	; 0x28
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <std+0x40>)
 800163a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <std+0x44>)
 800163e:	6323      	str	r3, [r4, #48]	; 0x30
 8001640:	bd10      	pop	{r4, pc}
 8001642:	bf00      	nop
 8001644:	08001f21 	.word	0x08001f21
 8001648:	08001f43 	.word	0x08001f43
 800164c:	08001f7b 	.word	0x08001f7b
 8001650:	08001f9f 	.word	0x08001f9f

08001654 <_cleanup_r>:
 8001654:	4901      	ldr	r1, [pc, #4]	; (800165c <_cleanup_r+0x8>)
 8001656:	f000 b8af 	b.w	80017b8 <_fwalk_reent>
 800165a:	bf00      	nop
 800165c:	08002271 	.word	0x08002271

08001660 <__sfmoreglue>:
 8001660:	2268      	movs	r2, #104	; 0x68
 8001662:	b570      	push	{r4, r5, r6, lr}
 8001664:	1e4d      	subs	r5, r1, #1
 8001666:	4355      	muls	r5, r2
 8001668:	460e      	mov	r6, r1
 800166a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800166e:	f000 f8e5 	bl	800183c <_malloc_r>
 8001672:	4604      	mov	r4, r0
 8001674:	b140      	cbz	r0, 8001688 <__sfmoreglue+0x28>
 8001676:	2100      	movs	r1, #0
 8001678:	e9c0 1600 	strd	r1, r6, [r0]
 800167c:	300c      	adds	r0, #12
 800167e:	60a0      	str	r0, [r4, #8]
 8001680:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001684:	f7ff ffa2 	bl	80015cc <memset>
 8001688:	4620      	mov	r0, r4
 800168a:	bd70      	pop	{r4, r5, r6, pc}

0800168c <__sfp_lock_acquire>:
 800168c:	4801      	ldr	r0, [pc, #4]	; (8001694 <__sfp_lock_acquire+0x8>)
 800168e:	f000 b8b3 	b.w	80017f8 <__retarget_lock_acquire_recursive>
 8001692:	bf00      	nop
 8001694:	200000dd 	.word	0x200000dd

08001698 <__sfp_lock_release>:
 8001698:	4801      	ldr	r0, [pc, #4]	; (80016a0 <__sfp_lock_release+0x8>)
 800169a:	f000 b8ae 	b.w	80017fa <__retarget_lock_release_recursive>
 800169e:	bf00      	nop
 80016a0:	200000dd 	.word	0x200000dd

080016a4 <__sinit_lock_acquire>:
 80016a4:	4801      	ldr	r0, [pc, #4]	; (80016ac <__sinit_lock_acquire+0x8>)
 80016a6:	f000 b8a7 	b.w	80017f8 <__retarget_lock_acquire_recursive>
 80016aa:	bf00      	nop
 80016ac:	200000de 	.word	0x200000de

080016b0 <__sinit_lock_release>:
 80016b0:	4801      	ldr	r0, [pc, #4]	; (80016b8 <__sinit_lock_release+0x8>)
 80016b2:	f000 b8a2 	b.w	80017fa <__retarget_lock_release_recursive>
 80016b6:	bf00      	nop
 80016b8:	200000de 	.word	0x200000de

080016bc <__sinit>:
 80016bc:	b510      	push	{r4, lr}
 80016be:	4604      	mov	r4, r0
 80016c0:	f7ff fff0 	bl	80016a4 <__sinit_lock_acquire>
 80016c4:	69a3      	ldr	r3, [r4, #24]
 80016c6:	b11b      	cbz	r3, 80016d0 <__sinit+0x14>
 80016c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016cc:	f7ff bff0 	b.w	80016b0 <__sinit_lock_release>
 80016d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80016d4:	6523      	str	r3, [r4, #80]	; 0x50
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <__sinit+0x68>)
 80016d8:	4a13      	ldr	r2, [pc, #76]	; (8001728 <__sinit+0x6c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80016de:	42a3      	cmp	r3, r4
 80016e0:	bf08      	it	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	4620      	mov	r0, r4
 80016e6:	bf08      	it	eq
 80016e8:	61a3      	streq	r3, [r4, #24]
 80016ea:	f000 f81f 	bl	800172c <__sfp>
 80016ee:	6060      	str	r0, [r4, #4]
 80016f0:	4620      	mov	r0, r4
 80016f2:	f000 f81b 	bl	800172c <__sfp>
 80016f6:	60a0      	str	r0, [r4, #8]
 80016f8:	4620      	mov	r0, r4
 80016fa:	f000 f817 	bl	800172c <__sfp>
 80016fe:	2200      	movs	r2, #0
 8001700:	2104      	movs	r1, #4
 8001702:	60e0      	str	r0, [r4, #12]
 8001704:	6860      	ldr	r0, [r4, #4]
 8001706:	f7ff ff81 	bl	800160c <std>
 800170a:	2201      	movs	r2, #1
 800170c:	2109      	movs	r1, #9
 800170e:	68a0      	ldr	r0, [r4, #8]
 8001710:	f7ff ff7c 	bl	800160c <std>
 8001714:	2202      	movs	r2, #2
 8001716:	2112      	movs	r1, #18
 8001718:	68e0      	ldr	r0, [r4, #12]
 800171a:	f7ff ff77 	bl	800160c <std>
 800171e:	2301      	movs	r3, #1
 8001720:	61a3      	str	r3, [r4, #24]
 8001722:	e7d1      	b.n	80016c8 <__sinit+0xc>
 8001724:	08002558 	.word	0x08002558
 8001728:	08001655 	.word	0x08001655

0800172c <__sfp>:
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172e:	4607      	mov	r7, r0
 8001730:	f7ff ffac 	bl	800168c <__sfp_lock_acquire>
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <__sfp+0x84>)
 8001736:	681e      	ldr	r6, [r3, #0]
 8001738:	69b3      	ldr	r3, [r6, #24]
 800173a:	b913      	cbnz	r3, 8001742 <__sfp+0x16>
 800173c:	4630      	mov	r0, r6
 800173e:	f7ff ffbd 	bl	80016bc <__sinit>
 8001742:	3648      	adds	r6, #72	; 0x48
 8001744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001748:	3b01      	subs	r3, #1
 800174a:	d503      	bpl.n	8001754 <__sfp+0x28>
 800174c:	6833      	ldr	r3, [r6, #0]
 800174e:	b30b      	cbz	r3, 8001794 <__sfp+0x68>
 8001750:	6836      	ldr	r6, [r6, #0]
 8001752:	e7f7      	b.n	8001744 <__sfp+0x18>
 8001754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001758:	b9d5      	cbnz	r5, 8001790 <__sfp+0x64>
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <__sfp+0x88>)
 800175c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001760:	60e3      	str	r3, [r4, #12]
 8001762:	6665      	str	r5, [r4, #100]	; 0x64
 8001764:	f000 f847 	bl	80017f6 <__retarget_lock_init_recursive>
 8001768:	f7ff ff96 	bl	8001698 <__sfp_lock_release>
 800176c:	2208      	movs	r2, #8
 800176e:	4629      	mov	r1, r5
 8001770:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001774:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001778:	6025      	str	r5, [r4, #0]
 800177a:	61a5      	str	r5, [r4, #24]
 800177c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001780:	f7ff ff24 	bl	80015cc <memset>
 8001784:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001788:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800178c:	4620      	mov	r0, r4
 800178e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001790:	3468      	adds	r4, #104	; 0x68
 8001792:	e7d9      	b.n	8001748 <__sfp+0x1c>
 8001794:	2104      	movs	r1, #4
 8001796:	4638      	mov	r0, r7
 8001798:	f7ff ff62 	bl	8001660 <__sfmoreglue>
 800179c:	4604      	mov	r4, r0
 800179e:	6030      	str	r0, [r6, #0]
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d1d5      	bne.n	8001750 <__sfp+0x24>
 80017a4:	f7ff ff78 	bl	8001698 <__sfp_lock_release>
 80017a8:	230c      	movs	r3, #12
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	e7ee      	b.n	800178c <__sfp+0x60>
 80017ae:	bf00      	nop
 80017b0:	08002558 	.word	0x08002558
 80017b4:	ffff0001 	.word	0xffff0001

080017b8 <_fwalk_reent>:
 80017b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017bc:	4606      	mov	r6, r0
 80017be:	4688      	mov	r8, r1
 80017c0:	2700      	movs	r7, #0
 80017c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80017c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017ca:	f1b9 0901 	subs.w	r9, r9, #1
 80017ce:	d505      	bpl.n	80017dc <_fwalk_reent+0x24>
 80017d0:	6824      	ldr	r4, [r4, #0]
 80017d2:	2c00      	cmp	r4, #0
 80017d4:	d1f7      	bne.n	80017c6 <_fwalk_reent+0xe>
 80017d6:	4638      	mov	r0, r7
 80017d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017dc:	89ab      	ldrh	r3, [r5, #12]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d907      	bls.n	80017f2 <_fwalk_reent+0x3a>
 80017e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017e6:	3301      	adds	r3, #1
 80017e8:	d003      	beq.n	80017f2 <_fwalk_reent+0x3a>
 80017ea:	4629      	mov	r1, r5
 80017ec:	4630      	mov	r0, r6
 80017ee:	47c0      	blx	r8
 80017f0:	4307      	orrs	r7, r0
 80017f2:	3568      	adds	r5, #104	; 0x68
 80017f4:	e7e9      	b.n	80017ca <_fwalk_reent+0x12>

080017f6 <__retarget_lock_init_recursive>:
 80017f6:	4770      	bx	lr

080017f8 <__retarget_lock_acquire_recursive>:
 80017f8:	4770      	bx	lr

080017fa <__retarget_lock_release_recursive>:
 80017fa:	4770      	bx	lr

080017fc <sbrk_aligned>:
 80017fc:	b570      	push	{r4, r5, r6, lr}
 80017fe:	4e0e      	ldr	r6, [pc, #56]	; (8001838 <sbrk_aligned+0x3c>)
 8001800:	460c      	mov	r4, r1
 8001802:	6831      	ldr	r1, [r6, #0]
 8001804:	4605      	mov	r5, r0
 8001806:	b911      	cbnz	r1, 800180e <sbrk_aligned+0x12>
 8001808:	f000 fb7a 	bl	8001f00 <_sbrk_r>
 800180c:	6030      	str	r0, [r6, #0]
 800180e:	4621      	mov	r1, r4
 8001810:	4628      	mov	r0, r5
 8001812:	f000 fb75 	bl	8001f00 <_sbrk_r>
 8001816:	1c43      	adds	r3, r0, #1
 8001818:	d00a      	beq.n	8001830 <sbrk_aligned+0x34>
 800181a:	1cc4      	adds	r4, r0, #3
 800181c:	f024 0403 	bic.w	r4, r4, #3
 8001820:	42a0      	cmp	r0, r4
 8001822:	d007      	beq.n	8001834 <sbrk_aligned+0x38>
 8001824:	1a21      	subs	r1, r4, r0
 8001826:	4628      	mov	r0, r5
 8001828:	f000 fb6a 	bl	8001f00 <_sbrk_r>
 800182c:	3001      	adds	r0, #1
 800182e:	d101      	bne.n	8001834 <sbrk_aligned+0x38>
 8001830:	f04f 34ff 	mov.w	r4, #4294967295
 8001834:	4620      	mov	r0, r4
 8001836:	bd70      	pop	{r4, r5, r6, pc}
 8001838:	200000e4 	.word	0x200000e4

0800183c <_malloc_r>:
 800183c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001840:	1ccd      	adds	r5, r1, #3
 8001842:	f025 0503 	bic.w	r5, r5, #3
 8001846:	3508      	adds	r5, #8
 8001848:	2d0c      	cmp	r5, #12
 800184a:	bf38      	it	cc
 800184c:	250c      	movcc	r5, #12
 800184e:	2d00      	cmp	r5, #0
 8001850:	4607      	mov	r7, r0
 8001852:	db01      	blt.n	8001858 <_malloc_r+0x1c>
 8001854:	42a9      	cmp	r1, r5
 8001856:	d905      	bls.n	8001864 <_malloc_r+0x28>
 8001858:	230c      	movs	r3, #12
 800185a:	2600      	movs	r6, #0
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4630      	mov	r0, r6
 8001860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001864:	4e2e      	ldr	r6, [pc, #184]	; (8001920 <_malloc_r+0xe4>)
 8001866:	f000 fdc5 	bl	80023f4 <__malloc_lock>
 800186a:	6833      	ldr	r3, [r6, #0]
 800186c:	461c      	mov	r4, r3
 800186e:	bb34      	cbnz	r4, 80018be <_malloc_r+0x82>
 8001870:	4629      	mov	r1, r5
 8001872:	4638      	mov	r0, r7
 8001874:	f7ff ffc2 	bl	80017fc <sbrk_aligned>
 8001878:	1c43      	adds	r3, r0, #1
 800187a:	4604      	mov	r4, r0
 800187c:	d14d      	bne.n	800191a <_malloc_r+0xde>
 800187e:	6834      	ldr	r4, [r6, #0]
 8001880:	4626      	mov	r6, r4
 8001882:	2e00      	cmp	r6, #0
 8001884:	d140      	bne.n	8001908 <_malloc_r+0xcc>
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	4631      	mov	r1, r6
 800188a:	4638      	mov	r0, r7
 800188c:	eb04 0803 	add.w	r8, r4, r3
 8001890:	f000 fb36 	bl	8001f00 <_sbrk_r>
 8001894:	4580      	cmp	r8, r0
 8001896:	d13a      	bne.n	800190e <_malloc_r+0xd2>
 8001898:	6821      	ldr	r1, [r4, #0]
 800189a:	3503      	adds	r5, #3
 800189c:	1a6d      	subs	r5, r5, r1
 800189e:	f025 0503 	bic.w	r5, r5, #3
 80018a2:	3508      	adds	r5, #8
 80018a4:	2d0c      	cmp	r5, #12
 80018a6:	bf38      	it	cc
 80018a8:	250c      	movcc	r5, #12
 80018aa:	4638      	mov	r0, r7
 80018ac:	4629      	mov	r1, r5
 80018ae:	f7ff ffa5 	bl	80017fc <sbrk_aligned>
 80018b2:	3001      	adds	r0, #1
 80018b4:	d02b      	beq.n	800190e <_malloc_r+0xd2>
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	442b      	add	r3, r5
 80018ba:	6023      	str	r3, [r4, #0]
 80018bc:	e00e      	b.n	80018dc <_malloc_r+0xa0>
 80018be:	6822      	ldr	r2, [r4, #0]
 80018c0:	1b52      	subs	r2, r2, r5
 80018c2:	d41e      	bmi.n	8001902 <_malloc_r+0xc6>
 80018c4:	2a0b      	cmp	r2, #11
 80018c6:	d916      	bls.n	80018f6 <_malloc_r+0xba>
 80018c8:	1961      	adds	r1, r4, r5
 80018ca:	42a3      	cmp	r3, r4
 80018cc:	6025      	str	r5, [r4, #0]
 80018ce:	bf18      	it	ne
 80018d0:	6059      	strne	r1, [r3, #4]
 80018d2:	6863      	ldr	r3, [r4, #4]
 80018d4:	bf08      	it	eq
 80018d6:	6031      	streq	r1, [r6, #0]
 80018d8:	5162      	str	r2, [r4, r5]
 80018da:	604b      	str	r3, [r1, #4]
 80018dc:	4638      	mov	r0, r7
 80018de:	f104 060b 	add.w	r6, r4, #11
 80018e2:	f000 fd8d 	bl	8002400 <__malloc_unlock>
 80018e6:	f026 0607 	bic.w	r6, r6, #7
 80018ea:	1d23      	adds	r3, r4, #4
 80018ec:	1af2      	subs	r2, r6, r3
 80018ee:	d0b6      	beq.n	800185e <_malloc_r+0x22>
 80018f0:	1b9b      	subs	r3, r3, r6
 80018f2:	50a3      	str	r3, [r4, r2]
 80018f4:	e7b3      	b.n	800185e <_malloc_r+0x22>
 80018f6:	6862      	ldr	r2, [r4, #4]
 80018f8:	42a3      	cmp	r3, r4
 80018fa:	bf0c      	ite	eq
 80018fc:	6032      	streq	r2, [r6, #0]
 80018fe:	605a      	strne	r2, [r3, #4]
 8001900:	e7ec      	b.n	80018dc <_malloc_r+0xa0>
 8001902:	4623      	mov	r3, r4
 8001904:	6864      	ldr	r4, [r4, #4]
 8001906:	e7b2      	b.n	800186e <_malloc_r+0x32>
 8001908:	4634      	mov	r4, r6
 800190a:	6876      	ldr	r6, [r6, #4]
 800190c:	e7b9      	b.n	8001882 <_malloc_r+0x46>
 800190e:	230c      	movs	r3, #12
 8001910:	4638      	mov	r0, r7
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	f000 fd74 	bl	8002400 <__malloc_unlock>
 8001918:	e7a1      	b.n	800185e <_malloc_r+0x22>
 800191a:	6025      	str	r5, [r4, #0]
 800191c:	e7de      	b.n	80018dc <_malloc_r+0xa0>
 800191e:	bf00      	nop
 8001920:	200000e0 	.word	0x200000e0

08001924 <__sfputc_r>:
 8001924:	6893      	ldr	r3, [r2, #8]
 8001926:	b410      	push	{r4}
 8001928:	3b01      	subs	r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	6093      	str	r3, [r2, #8]
 800192e:	da07      	bge.n	8001940 <__sfputc_r+0x1c>
 8001930:	6994      	ldr	r4, [r2, #24]
 8001932:	42a3      	cmp	r3, r4
 8001934:	db01      	blt.n	800193a <__sfputc_r+0x16>
 8001936:	290a      	cmp	r1, #10
 8001938:	d102      	bne.n	8001940 <__sfputc_r+0x1c>
 800193a:	bc10      	pop	{r4}
 800193c:	f000 bb34 	b.w	8001fa8 <__swbuf_r>
 8001940:	6813      	ldr	r3, [r2, #0]
 8001942:	1c58      	adds	r0, r3, #1
 8001944:	6010      	str	r0, [r2, #0]
 8001946:	7019      	strb	r1, [r3, #0]
 8001948:	4608      	mov	r0, r1
 800194a:	bc10      	pop	{r4}
 800194c:	4770      	bx	lr

0800194e <__sfputs_r>:
 800194e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001950:	4606      	mov	r6, r0
 8001952:	460f      	mov	r7, r1
 8001954:	4614      	mov	r4, r2
 8001956:	18d5      	adds	r5, r2, r3
 8001958:	42ac      	cmp	r4, r5
 800195a:	d101      	bne.n	8001960 <__sfputs_r+0x12>
 800195c:	2000      	movs	r0, #0
 800195e:	e007      	b.n	8001970 <__sfputs_r+0x22>
 8001960:	463a      	mov	r2, r7
 8001962:	4630      	mov	r0, r6
 8001964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001968:	f7ff ffdc 	bl	8001924 <__sfputc_r>
 800196c:	1c43      	adds	r3, r0, #1
 800196e:	d1f3      	bne.n	8001958 <__sfputs_r+0xa>
 8001970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001974 <_vfiprintf_r>:
 8001974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001978:	460d      	mov	r5, r1
 800197a:	4614      	mov	r4, r2
 800197c:	4698      	mov	r8, r3
 800197e:	4606      	mov	r6, r0
 8001980:	b09d      	sub	sp, #116	; 0x74
 8001982:	b118      	cbz	r0, 800198c <_vfiprintf_r+0x18>
 8001984:	6983      	ldr	r3, [r0, #24]
 8001986:	b90b      	cbnz	r3, 800198c <_vfiprintf_r+0x18>
 8001988:	f7ff fe98 	bl	80016bc <__sinit>
 800198c:	4b89      	ldr	r3, [pc, #548]	; (8001bb4 <_vfiprintf_r+0x240>)
 800198e:	429d      	cmp	r5, r3
 8001990:	d11b      	bne.n	80019ca <_vfiprintf_r+0x56>
 8001992:	6875      	ldr	r5, [r6, #4]
 8001994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001996:	07d9      	lsls	r1, r3, #31
 8001998:	d405      	bmi.n	80019a6 <_vfiprintf_r+0x32>
 800199a:	89ab      	ldrh	r3, [r5, #12]
 800199c:	059a      	lsls	r2, r3, #22
 800199e:	d402      	bmi.n	80019a6 <_vfiprintf_r+0x32>
 80019a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019a2:	f7ff ff29 	bl	80017f8 <__retarget_lock_acquire_recursive>
 80019a6:	89ab      	ldrh	r3, [r5, #12]
 80019a8:	071b      	lsls	r3, r3, #28
 80019aa:	d501      	bpl.n	80019b0 <_vfiprintf_r+0x3c>
 80019ac:	692b      	ldr	r3, [r5, #16]
 80019ae:	b9eb      	cbnz	r3, 80019ec <_vfiprintf_r+0x78>
 80019b0:	4629      	mov	r1, r5
 80019b2:	4630      	mov	r0, r6
 80019b4:	f000 fb5c 	bl	8002070 <__swsetup_r>
 80019b8:	b1c0      	cbz	r0, 80019ec <_vfiprintf_r+0x78>
 80019ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019bc:	07dc      	lsls	r4, r3, #31
 80019be:	d50e      	bpl.n	80019de <_vfiprintf_r+0x6a>
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	b01d      	add	sp, #116	; 0x74
 80019c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019ca:	4b7b      	ldr	r3, [pc, #492]	; (8001bb8 <_vfiprintf_r+0x244>)
 80019cc:	429d      	cmp	r5, r3
 80019ce:	d101      	bne.n	80019d4 <_vfiprintf_r+0x60>
 80019d0:	68b5      	ldr	r5, [r6, #8]
 80019d2:	e7df      	b.n	8001994 <_vfiprintf_r+0x20>
 80019d4:	4b79      	ldr	r3, [pc, #484]	; (8001bbc <_vfiprintf_r+0x248>)
 80019d6:	429d      	cmp	r5, r3
 80019d8:	bf08      	it	eq
 80019da:	68f5      	ldreq	r5, [r6, #12]
 80019dc:	e7da      	b.n	8001994 <_vfiprintf_r+0x20>
 80019de:	89ab      	ldrh	r3, [r5, #12]
 80019e0:	0598      	lsls	r0, r3, #22
 80019e2:	d4ed      	bmi.n	80019c0 <_vfiprintf_r+0x4c>
 80019e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019e6:	f7ff ff08 	bl	80017fa <__retarget_lock_release_recursive>
 80019ea:	e7e9      	b.n	80019c0 <_vfiprintf_r+0x4c>
 80019ec:	2300      	movs	r3, #0
 80019ee:	9309      	str	r3, [sp, #36]	; 0x24
 80019f0:	2320      	movs	r3, #32
 80019f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019f6:	2330      	movs	r3, #48	; 0x30
 80019f8:	f04f 0901 	mov.w	r9, #1
 80019fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a00:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001bc0 <_vfiprintf_r+0x24c>
 8001a04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a08:	4623      	mov	r3, r4
 8001a0a:	469a      	mov	sl, r3
 8001a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a10:	b10a      	cbz	r2, 8001a16 <_vfiprintf_r+0xa2>
 8001a12:	2a25      	cmp	r2, #37	; 0x25
 8001a14:	d1f9      	bne.n	8001a0a <_vfiprintf_r+0x96>
 8001a16:	ebba 0b04 	subs.w	fp, sl, r4
 8001a1a:	d00b      	beq.n	8001a34 <_vfiprintf_r+0xc0>
 8001a1c:	465b      	mov	r3, fp
 8001a1e:	4622      	mov	r2, r4
 8001a20:	4629      	mov	r1, r5
 8001a22:	4630      	mov	r0, r6
 8001a24:	f7ff ff93 	bl	800194e <__sfputs_r>
 8001a28:	3001      	adds	r0, #1
 8001a2a:	f000 80aa 	beq.w	8001b82 <_vfiprintf_r+0x20e>
 8001a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a30:	445a      	add	r2, fp
 8001a32:	9209      	str	r2, [sp, #36]	; 0x24
 8001a34:	f89a 3000 	ldrb.w	r3, [sl]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80a2 	beq.w	8001b82 <_vfiprintf_r+0x20e>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a48:	f10a 0a01 	add.w	sl, sl, #1
 8001a4c:	9304      	str	r3, [sp, #16]
 8001a4e:	9307      	str	r3, [sp, #28]
 8001a50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a54:	931a      	str	r3, [sp, #104]	; 0x68
 8001a56:	4654      	mov	r4, sl
 8001a58:	2205      	movs	r2, #5
 8001a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a5e:	4858      	ldr	r0, [pc, #352]	; (8001bc0 <_vfiprintf_r+0x24c>)
 8001a60:	f000 fcba 	bl	80023d8 <memchr>
 8001a64:	9a04      	ldr	r2, [sp, #16]
 8001a66:	b9d8      	cbnz	r0, 8001aa0 <_vfiprintf_r+0x12c>
 8001a68:	06d1      	lsls	r1, r2, #27
 8001a6a:	bf44      	itt	mi
 8001a6c:	2320      	movmi	r3, #32
 8001a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a72:	0713      	lsls	r3, r2, #28
 8001a74:	bf44      	itt	mi
 8001a76:	232b      	movmi	r3, #43	; 0x2b
 8001a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8001a80:	2b2a      	cmp	r3, #42	; 0x2a
 8001a82:	d015      	beq.n	8001ab0 <_vfiprintf_r+0x13c>
 8001a84:	4654      	mov	r4, sl
 8001a86:	2000      	movs	r0, #0
 8001a88:	f04f 0c0a 	mov.w	ip, #10
 8001a8c:	9a07      	ldr	r2, [sp, #28]
 8001a8e:	4621      	mov	r1, r4
 8001a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a94:	3b30      	subs	r3, #48	; 0x30
 8001a96:	2b09      	cmp	r3, #9
 8001a98:	d94e      	bls.n	8001b38 <_vfiprintf_r+0x1c4>
 8001a9a:	b1b0      	cbz	r0, 8001aca <_vfiprintf_r+0x156>
 8001a9c:	9207      	str	r2, [sp, #28]
 8001a9e:	e014      	b.n	8001aca <_vfiprintf_r+0x156>
 8001aa0:	eba0 0308 	sub.w	r3, r0, r8
 8001aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	46a2      	mov	sl, r4
 8001aac:	9304      	str	r3, [sp, #16]
 8001aae:	e7d2      	b.n	8001a56 <_vfiprintf_r+0xe2>
 8001ab0:	9b03      	ldr	r3, [sp, #12]
 8001ab2:	1d19      	adds	r1, r3, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	9103      	str	r1, [sp, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bfbb      	ittet	lt
 8001abc:	425b      	neglt	r3, r3
 8001abe:	f042 0202 	orrlt.w	r2, r2, #2
 8001ac2:	9307      	strge	r3, [sp, #28]
 8001ac4:	9307      	strlt	r3, [sp, #28]
 8001ac6:	bfb8      	it	lt
 8001ac8:	9204      	strlt	r2, [sp, #16]
 8001aca:	7823      	ldrb	r3, [r4, #0]
 8001acc:	2b2e      	cmp	r3, #46	; 0x2e
 8001ace:	d10c      	bne.n	8001aea <_vfiprintf_r+0x176>
 8001ad0:	7863      	ldrb	r3, [r4, #1]
 8001ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8001ad4:	d135      	bne.n	8001b42 <_vfiprintf_r+0x1ce>
 8001ad6:	9b03      	ldr	r3, [sp, #12]
 8001ad8:	3402      	adds	r4, #2
 8001ada:	1d1a      	adds	r2, r3, #4
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	9203      	str	r2, [sp, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bfb8      	it	lt
 8001ae4:	f04f 33ff 	movlt.w	r3, #4294967295
 8001ae8:	9305      	str	r3, [sp, #20]
 8001aea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001bc4 <_vfiprintf_r+0x250>
 8001aee:	2203      	movs	r2, #3
 8001af0:	4650      	mov	r0, sl
 8001af2:	7821      	ldrb	r1, [r4, #0]
 8001af4:	f000 fc70 	bl	80023d8 <memchr>
 8001af8:	b140      	cbz	r0, 8001b0c <_vfiprintf_r+0x198>
 8001afa:	2340      	movs	r3, #64	; 0x40
 8001afc:	eba0 000a 	sub.w	r0, r0, sl
 8001b00:	fa03 f000 	lsl.w	r0, r3, r0
 8001b04:	9b04      	ldr	r3, [sp, #16]
 8001b06:	3401      	adds	r4, #1
 8001b08:	4303      	orrs	r3, r0
 8001b0a:	9304      	str	r3, [sp, #16]
 8001b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b10:	2206      	movs	r2, #6
 8001b12:	482d      	ldr	r0, [pc, #180]	; (8001bc8 <_vfiprintf_r+0x254>)
 8001b14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b18:	f000 fc5e 	bl	80023d8 <memchr>
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	d03f      	beq.n	8001ba0 <_vfiprintf_r+0x22c>
 8001b20:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <_vfiprintf_r+0x258>)
 8001b22:	bb1b      	cbnz	r3, 8001b6c <_vfiprintf_r+0x1f8>
 8001b24:	9b03      	ldr	r3, [sp, #12]
 8001b26:	3307      	adds	r3, #7
 8001b28:	f023 0307 	bic.w	r3, r3, #7
 8001b2c:	3308      	adds	r3, #8
 8001b2e:	9303      	str	r3, [sp, #12]
 8001b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b32:	443b      	add	r3, r7
 8001b34:	9309      	str	r3, [sp, #36]	; 0x24
 8001b36:	e767      	b.n	8001a08 <_vfiprintf_r+0x94>
 8001b38:	460c      	mov	r4, r1
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b40:	e7a5      	b.n	8001a8e <_vfiprintf_r+0x11a>
 8001b42:	2300      	movs	r3, #0
 8001b44:	f04f 0c0a 	mov.w	ip, #10
 8001b48:	4619      	mov	r1, r3
 8001b4a:	3401      	adds	r4, #1
 8001b4c:	9305      	str	r3, [sp, #20]
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b54:	3a30      	subs	r2, #48	; 0x30
 8001b56:	2a09      	cmp	r2, #9
 8001b58:	d903      	bls.n	8001b62 <_vfiprintf_r+0x1ee>
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0c5      	beq.n	8001aea <_vfiprintf_r+0x176>
 8001b5e:	9105      	str	r1, [sp, #20]
 8001b60:	e7c3      	b.n	8001aea <_vfiprintf_r+0x176>
 8001b62:	4604      	mov	r4, r0
 8001b64:	2301      	movs	r3, #1
 8001b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b6a:	e7f0      	b.n	8001b4e <_vfiprintf_r+0x1da>
 8001b6c:	ab03      	add	r3, sp, #12
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	462a      	mov	r2, r5
 8001b72:	4630      	mov	r0, r6
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <_vfiprintf_r+0x25c>)
 8001b76:	a904      	add	r1, sp, #16
 8001b78:	f3af 8000 	nop.w
 8001b7c:	4607      	mov	r7, r0
 8001b7e:	1c78      	adds	r0, r7, #1
 8001b80:	d1d6      	bne.n	8001b30 <_vfiprintf_r+0x1bc>
 8001b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b84:	07d9      	lsls	r1, r3, #31
 8001b86:	d405      	bmi.n	8001b94 <_vfiprintf_r+0x220>
 8001b88:	89ab      	ldrh	r3, [r5, #12]
 8001b8a:	059a      	lsls	r2, r3, #22
 8001b8c:	d402      	bmi.n	8001b94 <_vfiprintf_r+0x220>
 8001b8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b90:	f7ff fe33 	bl	80017fa <__retarget_lock_release_recursive>
 8001b94:	89ab      	ldrh	r3, [r5, #12]
 8001b96:	065b      	lsls	r3, r3, #25
 8001b98:	f53f af12 	bmi.w	80019c0 <_vfiprintf_r+0x4c>
 8001b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b9e:	e711      	b.n	80019c4 <_vfiprintf_r+0x50>
 8001ba0:	ab03      	add	r3, sp, #12
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	462a      	mov	r2, r5
 8001ba6:	4630      	mov	r0, r6
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <_vfiprintf_r+0x25c>)
 8001baa:	a904      	add	r1, sp, #16
 8001bac:	f000 f882 	bl	8001cb4 <_printf_i>
 8001bb0:	e7e4      	b.n	8001b7c <_vfiprintf_r+0x208>
 8001bb2:	bf00      	nop
 8001bb4:	0800257c 	.word	0x0800257c
 8001bb8:	0800259c 	.word	0x0800259c
 8001bbc:	0800255c 	.word	0x0800255c
 8001bc0:	080025bc 	.word	0x080025bc
 8001bc4:	080025c2 	.word	0x080025c2
 8001bc8:	080025c6 	.word	0x080025c6
 8001bcc:	00000000 	.word	0x00000000
 8001bd0:	0800194f 	.word	0x0800194f

08001bd4 <_printf_common>:
 8001bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bd8:	4616      	mov	r6, r2
 8001bda:	4699      	mov	r9, r3
 8001bdc:	688a      	ldr	r2, [r1, #8]
 8001bde:	690b      	ldr	r3, [r1, #16]
 8001be0:	4607      	mov	r7, r0
 8001be2:	4293      	cmp	r3, r2
 8001be4:	bfb8      	it	lt
 8001be6:	4613      	movlt	r3, r2
 8001be8:	6033      	str	r3, [r6, #0]
 8001bea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001bee:	460c      	mov	r4, r1
 8001bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bf4:	b10a      	cbz	r2, 8001bfa <_printf_common+0x26>
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	6033      	str	r3, [r6, #0]
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	0699      	lsls	r1, r3, #26
 8001bfe:	bf42      	ittt	mi
 8001c00:	6833      	ldrmi	r3, [r6, #0]
 8001c02:	3302      	addmi	r3, #2
 8001c04:	6033      	strmi	r3, [r6, #0]
 8001c06:	6825      	ldr	r5, [r4, #0]
 8001c08:	f015 0506 	ands.w	r5, r5, #6
 8001c0c:	d106      	bne.n	8001c1c <_printf_common+0x48>
 8001c0e:	f104 0a19 	add.w	sl, r4, #25
 8001c12:	68e3      	ldr	r3, [r4, #12]
 8001c14:	6832      	ldr	r2, [r6, #0]
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	42ab      	cmp	r3, r5
 8001c1a:	dc28      	bgt.n	8001c6e <_printf_common+0x9a>
 8001c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c20:	1e13      	subs	r3, r2, #0
 8001c22:	6822      	ldr	r2, [r4, #0]
 8001c24:	bf18      	it	ne
 8001c26:	2301      	movne	r3, #1
 8001c28:	0692      	lsls	r2, r2, #26
 8001c2a:	d42d      	bmi.n	8001c88 <_printf_common+0xb4>
 8001c2c:	4649      	mov	r1, r9
 8001c2e:	4638      	mov	r0, r7
 8001c30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c34:	47c0      	blx	r8
 8001c36:	3001      	adds	r0, #1
 8001c38:	d020      	beq.n	8001c7c <_printf_common+0xa8>
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	68e5      	ldr	r5, [r4, #12]
 8001c3e:	f003 0306 	and.w	r3, r3, #6
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf18      	it	ne
 8001c46:	2500      	movne	r5, #0
 8001c48:	6832      	ldr	r2, [r6, #0]
 8001c4a:	f04f 0600 	mov.w	r6, #0
 8001c4e:	68a3      	ldr	r3, [r4, #8]
 8001c50:	bf08      	it	eq
 8001c52:	1aad      	subeq	r5, r5, r2
 8001c54:	6922      	ldr	r2, [r4, #16]
 8001c56:	bf08      	it	eq
 8001c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	bfc4      	itt	gt
 8001c60:	1a9b      	subgt	r3, r3, r2
 8001c62:	18ed      	addgt	r5, r5, r3
 8001c64:	341a      	adds	r4, #26
 8001c66:	42b5      	cmp	r5, r6
 8001c68:	d11a      	bne.n	8001ca0 <_printf_common+0xcc>
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	e008      	b.n	8001c80 <_printf_common+0xac>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	4652      	mov	r2, sl
 8001c72:	4649      	mov	r1, r9
 8001c74:	4638      	mov	r0, r7
 8001c76:	47c0      	blx	r8
 8001c78:	3001      	adds	r0, #1
 8001c7a:	d103      	bne.n	8001c84 <_printf_common+0xb0>
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c84:	3501      	adds	r5, #1
 8001c86:	e7c4      	b.n	8001c12 <_printf_common+0x3e>
 8001c88:	2030      	movs	r0, #48	; 0x30
 8001c8a:	18e1      	adds	r1, r4, r3
 8001c8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c96:	4422      	add	r2, r4
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c9e:	e7c5      	b.n	8001c2c <_printf_common+0x58>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	4649      	mov	r1, r9
 8001ca6:	4638      	mov	r0, r7
 8001ca8:	47c0      	blx	r8
 8001caa:	3001      	adds	r0, #1
 8001cac:	d0e6      	beq.n	8001c7c <_printf_common+0xa8>
 8001cae:	3601      	adds	r6, #1
 8001cb0:	e7d9      	b.n	8001c66 <_printf_common+0x92>
	...

08001cb4 <_printf_i>:
 8001cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001cb8:	7e0f      	ldrb	r7, [r1, #24]
 8001cba:	4691      	mov	r9, r2
 8001cbc:	2f78      	cmp	r7, #120	; 0x78
 8001cbe:	4680      	mov	r8, r0
 8001cc0:	460c      	mov	r4, r1
 8001cc2:	469a      	mov	sl, r3
 8001cc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001cc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001cca:	d807      	bhi.n	8001cdc <_printf_i+0x28>
 8001ccc:	2f62      	cmp	r7, #98	; 0x62
 8001cce:	d80a      	bhi.n	8001ce6 <_printf_i+0x32>
 8001cd0:	2f00      	cmp	r7, #0
 8001cd2:	f000 80d9 	beq.w	8001e88 <_printf_i+0x1d4>
 8001cd6:	2f58      	cmp	r7, #88	; 0x58
 8001cd8:	f000 80a4 	beq.w	8001e24 <_printf_i+0x170>
 8001cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ce0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ce4:	e03a      	b.n	8001d5c <_printf_i+0xa8>
 8001ce6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001cea:	2b15      	cmp	r3, #21
 8001cec:	d8f6      	bhi.n	8001cdc <_printf_i+0x28>
 8001cee:	a101      	add	r1, pc, #4	; (adr r1, 8001cf4 <_printf_i+0x40>)
 8001cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001cf4:	08001d4d 	.word	0x08001d4d
 8001cf8:	08001d61 	.word	0x08001d61
 8001cfc:	08001cdd 	.word	0x08001cdd
 8001d00:	08001cdd 	.word	0x08001cdd
 8001d04:	08001cdd 	.word	0x08001cdd
 8001d08:	08001cdd 	.word	0x08001cdd
 8001d0c:	08001d61 	.word	0x08001d61
 8001d10:	08001cdd 	.word	0x08001cdd
 8001d14:	08001cdd 	.word	0x08001cdd
 8001d18:	08001cdd 	.word	0x08001cdd
 8001d1c:	08001cdd 	.word	0x08001cdd
 8001d20:	08001e6f 	.word	0x08001e6f
 8001d24:	08001d91 	.word	0x08001d91
 8001d28:	08001e51 	.word	0x08001e51
 8001d2c:	08001cdd 	.word	0x08001cdd
 8001d30:	08001cdd 	.word	0x08001cdd
 8001d34:	08001e91 	.word	0x08001e91
 8001d38:	08001cdd 	.word	0x08001cdd
 8001d3c:	08001d91 	.word	0x08001d91
 8001d40:	08001cdd 	.word	0x08001cdd
 8001d44:	08001cdd 	.word	0x08001cdd
 8001d48:	08001e59 	.word	0x08001e59
 8001d4c:	682b      	ldr	r3, [r5, #0]
 8001d4e:	1d1a      	adds	r2, r3, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	602a      	str	r2, [r5, #0]
 8001d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0a4      	b.n	8001eaa <_printf_i+0x1f6>
 8001d60:	6820      	ldr	r0, [r4, #0]
 8001d62:	6829      	ldr	r1, [r5, #0]
 8001d64:	0606      	lsls	r6, r0, #24
 8001d66:	f101 0304 	add.w	r3, r1, #4
 8001d6a:	d50a      	bpl.n	8001d82 <_printf_i+0xce>
 8001d6c:	680e      	ldr	r6, [r1, #0]
 8001d6e:	602b      	str	r3, [r5, #0]
 8001d70:	2e00      	cmp	r6, #0
 8001d72:	da03      	bge.n	8001d7c <_printf_i+0xc8>
 8001d74:	232d      	movs	r3, #45	; 0x2d
 8001d76:	4276      	negs	r6, r6
 8001d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d7c:	230a      	movs	r3, #10
 8001d7e:	485e      	ldr	r0, [pc, #376]	; (8001ef8 <_printf_i+0x244>)
 8001d80:	e019      	b.n	8001db6 <_printf_i+0x102>
 8001d82:	680e      	ldr	r6, [r1, #0]
 8001d84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d88:	602b      	str	r3, [r5, #0]
 8001d8a:	bf18      	it	ne
 8001d8c:	b236      	sxthne	r6, r6
 8001d8e:	e7ef      	b.n	8001d70 <_printf_i+0xbc>
 8001d90:	682b      	ldr	r3, [r5, #0]
 8001d92:	6820      	ldr	r0, [r4, #0]
 8001d94:	1d19      	adds	r1, r3, #4
 8001d96:	6029      	str	r1, [r5, #0]
 8001d98:	0601      	lsls	r1, r0, #24
 8001d9a:	d501      	bpl.n	8001da0 <_printf_i+0xec>
 8001d9c:	681e      	ldr	r6, [r3, #0]
 8001d9e:	e002      	b.n	8001da6 <_printf_i+0xf2>
 8001da0:	0646      	lsls	r6, r0, #25
 8001da2:	d5fb      	bpl.n	8001d9c <_printf_i+0xe8>
 8001da4:	881e      	ldrh	r6, [r3, #0]
 8001da6:	2f6f      	cmp	r7, #111	; 0x6f
 8001da8:	bf0c      	ite	eq
 8001daa:	2308      	moveq	r3, #8
 8001dac:	230a      	movne	r3, #10
 8001dae:	4852      	ldr	r0, [pc, #328]	; (8001ef8 <_printf_i+0x244>)
 8001db0:	2100      	movs	r1, #0
 8001db2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001db6:	6865      	ldr	r5, [r4, #4]
 8001db8:	2d00      	cmp	r5, #0
 8001dba:	bfa8      	it	ge
 8001dbc:	6821      	ldrge	r1, [r4, #0]
 8001dbe:	60a5      	str	r5, [r4, #8]
 8001dc0:	bfa4      	itt	ge
 8001dc2:	f021 0104 	bicge.w	r1, r1, #4
 8001dc6:	6021      	strge	r1, [r4, #0]
 8001dc8:	b90e      	cbnz	r6, 8001dce <_printf_i+0x11a>
 8001dca:	2d00      	cmp	r5, #0
 8001dcc:	d04d      	beq.n	8001e6a <_printf_i+0x1b6>
 8001dce:	4615      	mov	r5, r2
 8001dd0:	fbb6 f1f3 	udiv	r1, r6, r3
 8001dd4:	fb03 6711 	mls	r7, r3, r1, r6
 8001dd8:	5dc7      	ldrb	r7, [r0, r7]
 8001dda:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001dde:	4637      	mov	r7, r6
 8001de0:	42bb      	cmp	r3, r7
 8001de2:	460e      	mov	r6, r1
 8001de4:	d9f4      	bls.n	8001dd0 <_printf_i+0x11c>
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d10b      	bne.n	8001e02 <_printf_i+0x14e>
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	07de      	lsls	r6, r3, #31
 8001dee:	d508      	bpl.n	8001e02 <_printf_i+0x14e>
 8001df0:	6923      	ldr	r3, [r4, #16]
 8001df2:	6861      	ldr	r1, [r4, #4]
 8001df4:	4299      	cmp	r1, r3
 8001df6:	bfde      	ittt	le
 8001df8:	2330      	movle	r3, #48	; 0x30
 8001dfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001dfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001e02:	1b52      	subs	r2, r2, r5
 8001e04:	6122      	str	r2, [r4, #16]
 8001e06:	464b      	mov	r3, r9
 8001e08:	4621      	mov	r1, r4
 8001e0a:	4640      	mov	r0, r8
 8001e0c:	f8cd a000 	str.w	sl, [sp]
 8001e10:	aa03      	add	r2, sp, #12
 8001e12:	f7ff fedf 	bl	8001bd4 <_printf_common>
 8001e16:	3001      	adds	r0, #1
 8001e18:	d14c      	bne.n	8001eb4 <_printf_i+0x200>
 8001e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1e:	b004      	add	sp, #16
 8001e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e24:	4834      	ldr	r0, [pc, #208]	; (8001ef8 <_printf_i+0x244>)
 8001e26:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001e2a:	6829      	ldr	r1, [r5, #0]
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e32:	6029      	str	r1, [r5, #0]
 8001e34:	061d      	lsls	r5, r3, #24
 8001e36:	d514      	bpl.n	8001e62 <_printf_i+0x1ae>
 8001e38:	07df      	lsls	r7, r3, #31
 8001e3a:	bf44      	itt	mi
 8001e3c:	f043 0320 	orrmi.w	r3, r3, #32
 8001e40:	6023      	strmi	r3, [r4, #0]
 8001e42:	b91e      	cbnz	r6, 8001e4c <_printf_i+0x198>
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	f023 0320 	bic.w	r3, r3, #32
 8001e4a:	6023      	str	r3, [r4, #0]
 8001e4c:	2310      	movs	r3, #16
 8001e4e:	e7af      	b.n	8001db0 <_printf_i+0xfc>
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	f043 0320 	orr.w	r3, r3, #32
 8001e56:	6023      	str	r3, [r4, #0]
 8001e58:	2378      	movs	r3, #120	; 0x78
 8001e5a:	4828      	ldr	r0, [pc, #160]	; (8001efc <_printf_i+0x248>)
 8001e5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e60:	e7e3      	b.n	8001e2a <_printf_i+0x176>
 8001e62:	0659      	lsls	r1, r3, #25
 8001e64:	bf48      	it	mi
 8001e66:	b2b6      	uxthmi	r6, r6
 8001e68:	e7e6      	b.n	8001e38 <_printf_i+0x184>
 8001e6a:	4615      	mov	r5, r2
 8001e6c:	e7bb      	b.n	8001de6 <_printf_i+0x132>
 8001e6e:	682b      	ldr	r3, [r5, #0]
 8001e70:	6826      	ldr	r6, [r4, #0]
 8001e72:	1d18      	adds	r0, r3, #4
 8001e74:	6961      	ldr	r1, [r4, #20]
 8001e76:	6028      	str	r0, [r5, #0]
 8001e78:	0635      	lsls	r5, r6, #24
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	d501      	bpl.n	8001e82 <_printf_i+0x1ce>
 8001e7e:	6019      	str	r1, [r3, #0]
 8001e80:	e002      	b.n	8001e88 <_printf_i+0x1d4>
 8001e82:	0670      	lsls	r0, r6, #25
 8001e84:	d5fb      	bpl.n	8001e7e <_printf_i+0x1ca>
 8001e86:	8019      	strh	r1, [r3, #0]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	4615      	mov	r5, r2
 8001e8c:	6123      	str	r3, [r4, #16]
 8001e8e:	e7ba      	b.n	8001e06 <_printf_i+0x152>
 8001e90:	682b      	ldr	r3, [r5, #0]
 8001e92:	2100      	movs	r1, #0
 8001e94:	1d1a      	adds	r2, r3, #4
 8001e96:	602a      	str	r2, [r5, #0]
 8001e98:	681d      	ldr	r5, [r3, #0]
 8001e9a:	6862      	ldr	r2, [r4, #4]
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	f000 fa9b 	bl	80023d8 <memchr>
 8001ea2:	b108      	cbz	r0, 8001ea8 <_printf_i+0x1f4>
 8001ea4:	1b40      	subs	r0, r0, r5
 8001ea6:	6060      	str	r0, [r4, #4]
 8001ea8:	6863      	ldr	r3, [r4, #4]
 8001eaa:	6123      	str	r3, [r4, #16]
 8001eac:	2300      	movs	r3, #0
 8001eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001eb2:	e7a8      	b.n	8001e06 <_printf_i+0x152>
 8001eb4:	462a      	mov	r2, r5
 8001eb6:	4649      	mov	r1, r9
 8001eb8:	4640      	mov	r0, r8
 8001eba:	6923      	ldr	r3, [r4, #16]
 8001ebc:	47d0      	blx	sl
 8001ebe:	3001      	adds	r0, #1
 8001ec0:	d0ab      	beq.n	8001e1a <_printf_i+0x166>
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	079b      	lsls	r3, r3, #30
 8001ec6:	d413      	bmi.n	8001ef0 <_printf_i+0x23c>
 8001ec8:	68e0      	ldr	r0, [r4, #12]
 8001eca:	9b03      	ldr	r3, [sp, #12]
 8001ecc:	4298      	cmp	r0, r3
 8001ece:	bfb8      	it	lt
 8001ed0:	4618      	movlt	r0, r3
 8001ed2:	e7a4      	b.n	8001e1e <_printf_i+0x16a>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	4632      	mov	r2, r6
 8001ed8:	4649      	mov	r1, r9
 8001eda:	4640      	mov	r0, r8
 8001edc:	47d0      	blx	sl
 8001ede:	3001      	adds	r0, #1
 8001ee0:	d09b      	beq.n	8001e1a <_printf_i+0x166>
 8001ee2:	3501      	adds	r5, #1
 8001ee4:	68e3      	ldr	r3, [r4, #12]
 8001ee6:	9903      	ldr	r1, [sp, #12]
 8001ee8:	1a5b      	subs	r3, r3, r1
 8001eea:	42ab      	cmp	r3, r5
 8001eec:	dcf2      	bgt.n	8001ed4 <_printf_i+0x220>
 8001eee:	e7eb      	b.n	8001ec8 <_printf_i+0x214>
 8001ef0:	2500      	movs	r5, #0
 8001ef2:	f104 0619 	add.w	r6, r4, #25
 8001ef6:	e7f5      	b.n	8001ee4 <_printf_i+0x230>
 8001ef8:	080025cd 	.word	0x080025cd
 8001efc:	080025de 	.word	0x080025de

08001f00 <_sbrk_r>:
 8001f00:	b538      	push	{r3, r4, r5, lr}
 8001f02:	2300      	movs	r3, #0
 8001f04:	4d05      	ldr	r5, [pc, #20]	; (8001f1c <_sbrk_r+0x1c>)
 8001f06:	4604      	mov	r4, r0
 8001f08:	4608      	mov	r0, r1
 8001f0a:	602b      	str	r3, [r5, #0]
 8001f0c:	f7fe faa6 	bl	800045c <_sbrk>
 8001f10:	1c43      	adds	r3, r0, #1
 8001f12:	d102      	bne.n	8001f1a <_sbrk_r+0x1a>
 8001f14:	682b      	ldr	r3, [r5, #0]
 8001f16:	b103      	cbz	r3, 8001f1a <_sbrk_r+0x1a>
 8001f18:	6023      	str	r3, [r4, #0]
 8001f1a:	bd38      	pop	{r3, r4, r5, pc}
 8001f1c:	200000e8 	.word	0x200000e8

08001f20 <__sread>:
 8001f20:	b510      	push	{r4, lr}
 8001f22:	460c      	mov	r4, r1
 8001f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f28:	f000 fab8 	bl	800249c <_read_r>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	bfab      	itete	ge
 8001f30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f32:	89a3      	ldrhlt	r3, [r4, #12]
 8001f34:	181b      	addge	r3, r3, r0
 8001f36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f3a:	bfac      	ite	ge
 8001f3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f3e:	81a3      	strhlt	r3, [r4, #12]
 8001f40:	bd10      	pop	{r4, pc}

08001f42 <__swrite>:
 8001f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f46:	461f      	mov	r7, r3
 8001f48:	898b      	ldrh	r3, [r1, #12]
 8001f4a:	4605      	mov	r5, r0
 8001f4c:	05db      	lsls	r3, r3, #23
 8001f4e:	460c      	mov	r4, r1
 8001f50:	4616      	mov	r6, r2
 8001f52:	d505      	bpl.n	8001f60 <__swrite+0x1e>
 8001f54:	2302      	movs	r3, #2
 8001f56:	2200      	movs	r2, #0
 8001f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f5c:	f000 f9c4 	bl	80022e8 <_lseek_r>
 8001f60:	89a3      	ldrh	r3, [r4, #12]
 8001f62:	4632      	mov	r2, r6
 8001f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f68:	81a3      	strh	r3, [r4, #12]
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f76:	f000 b869 	b.w	800204c <_write_r>

08001f7a <__sseek>:
 8001f7a:	b510      	push	{r4, lr}
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f82:	f000 f9b1 	bl	80022e8 <_lseek_r>
 8001f86:	1c43      	adds	r3, r0, #1
 8001f88:	89a3      	ldrh	r3, [r4, #12]
 8001f8a:	bf15      	itete	ne
 8001f8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f96:	81a3      	strheq	r3, [r4, #12]
 8001f98:	bf18      	it	ne
 8001f9a:	81a3      	strhne	r3, [r4, #12]
 8001f9c:	bd10      	pop	{r4, pc}

08001f9e <__sclose>:
 8001f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fa2:	f000 b8d3 	b.w	800214c <_close_r>
	...

08001fa8 <__swbuf_r>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	460e      	mov	r6, r1
 8001fac:	4614      	mov	r4, r2
 8001fae:	4605      	mov	r5, r0
 8001fb0:	b118      	cbz	r0, 8001fba <__swbuf_r+0x12>
 8001fb2:	6983      	ldr	r3, [r0, #24]
 8001fb4:	b90b      	cbnz	r3, 8001fba <__swbuf_r+0x12>
 8001fb6:	f7ff fb81 	bl	80016bc <__sinit>
 8001fba:	4b21      	ldr	r3, [pc, #132]	; (8002040 <__swbuf_r+0x98>)
 8001fbc:	429c      	cmp	r4, r3
 8001fbe:	d12b      	bne.n	8002018 <__swbuf_r+0x70>
 8001fc0:	686c      	ldr	r4, [r5, #4]
 8001fc2:	69a3      	ldr	r3, [r4, #24]
 8001fc4:	60a3      	str	r3, [r4, #8]
 8001fc6:	89a3      	ldrh	r3, [r4, #12]
 8001fc8:	071a      	lsls	r2, r3, #28
 8001fca:	d52f      	bpl.n	800202c <__swbuf_r+0x84>
 8001fcc:	6923      	ldr	r3, [r4, #16]
 8001fce:	b36b      	cbz	r3, 800202c <__swbuf_r+0x84>
 8001fd0:	6923      	ldr	r3, [r4, #16]
 8001fd2:	6820      	ldr	r0, [r4, #0]
 8001fd4:	b2f6      	uxtb	r6, r6
 8001fd6:	1ac0      	subs	r0, r0, r3
 8001fd8:	6963      	ldr	r3, [r4, #20]
 8001fda:	4637      	mov	r7, r6
 8001fdc:	4283      	cmp	r3, r0
 8001fde:	dc04      	bgt.n	8001fea <__swbuf_r+0x42>
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	4628      	mov	r0, r5
 8001fe4:	f000 f944 	bl	8002270 <_fflush_r>
 8001fe8:	bb30      	cbnz	r0, 8002038 <__swbuf_r+0x90>
 8001fea:	68a3      	ldr	r3, [r4, #8]
 8001fec:	3001      	adds	r0, #1
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	60a3      	str	r3, [r4, #8]
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	6022      	str	r2, [r4, #0]
 8001ff8:	701e      	strb	r6, [r3, #0]
 8001ffa:	6963      	ldr	r3, [r4, #20]
 8001ffc:	4283      	cmp	r3, r0
 8001ffe:	d004      	beq.n	800200a <__swbuf_r+0x62>
 8002000:	89a3      	ldrh	r3, [r4, #12]
 8002002:	07db      	lsls	r3, r3, #31
 8002004:	d506      	bpl.n	8002014 <__swbuf_r+0x6c>
 8002006:	2e0a      	cmp	r6, #10
 8002008:	d104      	bne.n	8002014 <__swbuf_r+0x6c>
 800200a:	4621      	mov	r1, r4
 800200c:	4628      	mov	r0, r5
 800200e:	f000 f92f 	bl	8002270 <_fflush_r>
 8002012:	b988      	cbnz	r0, 8002038 <__swbuf_r+0x90>
 8002014:	4638      	mov	r0, r7
 8002016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <__swbuf_r+0x9c>)
 800201a:	429c      	cmp	r4, r3
 800201c:	d101      	bne.n	8002022 <__swbuf_r+0x7a>
 800201e:	68ac      	ldr	r4, [r5, #8]
 8002020:	e7cf      	b.n	8001fc2 <__swbuf_r+0x1a>
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <__swbuf_r+0xa0>)
 8002024:	429c      	cmp	r4, r3
 8002026:	bf08      	it	eq
 8002028:	68ec      	ldreq	r4, [r5, #12]
 800202a:	e7ca      	b.n	8001fc2 <__swbuf_r+0x1a>
 800202c:	4621      	mov	r1, r4
 800202e:	4628      	mov	r0, r5
 8002030:	f000 f81e 	bl	8002070 <__swsetup_r>
 8002034:	2800      	cmp	r0, #0
 8002036:	d0cb      	beq.n	8001fd0 <__swbuf_r+0x28>
 8002038:	f04f 37ff 	mov.w	r7, #4294967295
 800203c:	e7ea      	b.n	8002014 <__swbuf_r+0x6c>
 800203e:	bf00      	nop
 8002040:	0800257c 	.word	0x0800257c
 8002044:	0800259c 	.word	0x0800259c
 8002048:	0800255c 	.word	0x0800255c

0800204c <_write_r>:
 800204c:	b538      	push	{r3, r4, r5, lr}
 800204e:	4604      	mov	r4, r0
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	2200      	movs	r2, #0
 8002056:	4d05      	ldr	r5, [pc, #20]	; (800206c <_write_r+0x20>)
 8002058:	602a      	str	r2, [r5, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	f7fe f9b2 	bl	80003c4 <_write>
 8002060:	1c43      	adds	r3, r0, #1
 8002062:	d102      	bne.n	800206a <_write_r+0x1e>
 8002064:	682b      	ldr	r3, [r5, #0]
 8002066:	b103      	cbz	r3, 800206a <_write_r+0x1e>
 8002068:	6023      	str	r3, [r4, #0]
 800206a:	bd38      	pop	{r3, r4, r5, pc}
 800206c:	200000e8 	.word	0x200000e8

08002070 <__swsetup_r>:
 8002070:	4b32      	ldr	r3, [pc, #200]	; (800213c <__swsetup_r+0xcc>)
 8002072:	b570      	push	{r4, r5, r6, lr}
 8002074:	681d      	ldr	r5, [r3, #0]
 8002076:	4606      	mov	r6, r0
 8002078:	460c      	mov	r4, r1
 800207a:	b125      	cbz	r5, 8002086 <__swsetup_r+0x16>
 800207c:	69ab      	ldr	r3, [r5, #24]
 800207e:	b913      	cbnz	r3, 8002086 <__swsetup_r+0x16>
 8002080:	4628      	mov	r0, r5
 8002082:	f7ff fb1b 	bl	80016bc <__sinit>
 8002086:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <__swsetup_r+0xd0>)
 8002088:	429c      	cmp	r4, r3
 800208a:	d10f      	bne.n	80020ac <__swsetup_r+0x3c>
 800208c:	686c      	ldr	r4, [r5, #4]
 800208e:	89a3      	ldrh	r3, [r4, #12]
 8002090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002094:	0719      	lsls	r1, r3, #28
 8002096:	d42c      	bmi.n	80020f2 <__swsetup_r+0x82>
 8002098:	06dd      	lsls	r5, r3, #27
 800209a:	d411      	bmi.n	80020c0 <__swsetup_r+0x50>
 800209c:	2309      	movs	r3, #9
 800209e:	6033      	str	r3, [r6, #0]
 80020a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	81a3      	strh	r3, [r4, #12]
 80020aa:	e03e      	b.n	800212a <__swsetup_r+0xba>
 80020ac:	4b25      	ldr	r3, [pc, #148]	; (8002144 <__swsetup_r+0xd4>)
 80020ae:	429c      	cmp	r4, r3
 80020b0:	d101      	bne.n	80020b6 <__swsetup_r+0x46>
 80020b2:	68ac      	ldr	r4, [r5, #8]
 80020b4:	e7eb      	b.n	800208e <__swsetup_r+0x1e>
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <__swsetup_r+0xd8>)
 80020b8:	429c      	cmp	r4, r3
 80020ba:	bf08      	it	eq
 80020bc:	68ec      	ldreq	r4, [r5, #12]
 80020be:	e7e6      	b.n	800208e <__swsetup_r+0x1e>
 80020c0:	0758      	lsls	r0, r3, #29
 80020c2:	d512      	bpl.n	80020ea <__swsetup_r+0x7a>
 80020c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020c6:	b141      	cbz	r1, 80020da <__swsetup_r+0x6a>
 80020c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020cc:	4299      	cmp	r1, r3
 80020ce:	d002      	beq.n	80020d6 <__swsetup_r+0x66>
 80020d0:	4630      	mov	r0, r6
 80020d2:	f000 f99b 	bl	800240c <_free_r>
 80020d6:	2300      	movs	r3, #0
 80020d8:	6363      	str	r3, [r4, #52]	; 0x34
 80020da:	89a3      	ldrh	r3, [r4, #12]
 80020dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80020e0:	81a3      	strh	r3, [r4, #12]
 80020e2:	2300      	movs	r3, #0
 80020e4:	6063      	str	r3, [r4, #4]
 80020e6:	6923      	ldr	r3, [r4, #16]
 80020e8:	6023      	str	r3, [r4, #0]
 80020ea:	89a3      	ldrh	r3, [r4, #12]
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	81a3      	strh	r3, [r4, #12]
 80020f2:	6923      	ldr	r3, [r4, #16]
 80020f4:	b94b      	cbnz	r3, 800210a <__swsetup_r+0x9a>
 80020f6:	89a3      	ldrh	r3, [r4, #12]
 80020f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80020fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002100:	d003      	beq.n	800210a <__swsetup_r+0x9a>
 8002102:	4621      	mov	r1, r4
 8002104:	4630      	mov	r0, r6
 8002106:	f000 f927 	bl	8002358 <__smakebuf_r>
 800210a:	89a0      	ldrh	r0, [r4, #12]
 800210c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002110:	f010 0301 	ands.w	r3, r0, #1
 8002114:	d00a      	beq.n	800212c <__swsetup_r+0xbc>
 8002116:	2300      	movs	r3, #0
 8002118:	60a3      	str	r3, [r4, #8]
 800211a:	6963      	ldr	r3, [r4, #20]
 800211c:	425b      	negs	r3, r3
 800211e:	61a3      	str	r3, [r4, #24]
 8002120:	6923      	ldr	r3, [r4, #16]
 8002122:	b943      	cbnz	r3, 8002136 <__swsetup_r+0xc6>
 8002124:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002128:	d1ba      	bne.n	80020a0 <__swsetup_r+0x30>
 800212a:	bd70      	pop	{r4, r5, r6, pc}
 800212c:	0781      	lsls	r1, r0, #30
 800212e:	bf58      	it	pl
 8002130:	6963      	ldrpl	r3, [r4, #20]
 8002132:	60a3      	str	r3, [r4, #8]
 8002134:	e7f4      	b.n	8002120 <__swsetup_r+0xb0>
 8002136:	2000      	movs	r0, #0
 8002138:	e7f7      	b.n	800212a <__swsetup_r+0xba>
 800213a:	bf00      	nop
 800213c:	2000000c 	.word	0x2000000c
 8002140:	0800257c 	.word	0x0800257c
 8002144:	0800259c 	.word	0x0800259c
 8002148:	0800255c 	.word	0x0800255c

0800214c <_close_r>:
 800214c:	b538      	push	{r3, r4, r5, lr}
 800214e:	2300      	movs	r3, #0
 8002150:	4d05      	ldr	r5, [pc, #20]	; (8002168 <_close_r+0x1c>)
 8002152:	4604      	mov	r4, r0
 8002154:	4608      	mov	r0, r1
 8002156:	602b      	str	r3, [r5, #0]
 8002158:	f7fe f950 	bl	80003fc <_close>
 800215c:	1c43      	adds	r3, r0, #1
 800215e:	d102      	bne.n	8002166 <_close_r+0x1a>
 8002160:	682b      	ldr	r3, [r5, #0]
 8002162:	b103      	cbz	r3, 8002166 <_close_r+0x1a>
 8002164:	6023      	str	r3, [r4, #0]
 8002166:	bd38      	pop	{r3, r4, r5, pc}
 8002168:	200000e8 	.word	0x200000e8

0800216c <__sflush_r>:
 800216c:	898a      	ldrh	r2, [r1, #12]
 800216e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002170:	4605      	mov	r5, r0
 8002172:	0710      	lsls	r0, r2, #28
 8002174:	460c      	mov	r4, r1
 8002176:	d457      	bmi.n	8002228 <__sflush_r+0xbc>
 8002178:	684b      	ldr	r3, [r1, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	dc04      	bgt.n	8002188 <__sflush_r+0x1c>
 800217e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002180:	2b00      	cmp	r3, #0
 8002182:	dc01      	bgt.n	8002188 <__sflush_r+0x1c>
 8002184:	2000      	movs	r0, #0
 8002186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800218a:	2e00      	cmp	r6, #0
 800218c:	d0fa      	beq.n	8002184 <__sflush_r+0x18>
 800218e:	2300      	movs	r3, #0
 8002190:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002194:	682f      	ldr	r7, [r5, #0]
 8002196:	602b      	str	r3, [r5, #0]
 8002198:	d032      	beq.n	8002200 <__sflush_r+0x94>
 800219a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800219c:	89a3      	ldrh	r3, [r4, #12]
 800219e:	075a      	lsls	r2, r3, #29
 80021a0:	d505      	bpl.n	80021ae <__sflush_r+0x42>
 80021a2:	6863      	ldr	r3, [r4, #4]
 80021a4:	1ac0      	subs	r0, r0, r3
 80021a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021a8:	b10b      	cbz	r3, 80021ae <__sflush_r+0x42>
 80021aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021ac:	1ac0      	subs	r0, r0, r3
 80021ae:	2300      	movs	r3, #0
 80021b0:	4602      	mov	r2, r0
 80021b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021b4:	4628      	mov	r0, r5
 80021b6:	6a21      	ldr	r1, [r4, #32]
 80021b8:	47b0      	blx	r6
 80021ba:	1c43      	adds	r3, r0, #1
 80021bc:	89a3      	ldrh	r3, [r4, #12]
 80021be:	d106      	bne.n	80021ce <__sflush_r+0x62>
 80021c0:	6829      	ldr	r1, [r5, #0]
 80021c2:	291d      	cmp	r1, #29
 80021c4:	d82c      	bhi.n	8002220 <__sflush_r+0xb4>
 80021c6:	4a29      	ldr	r2, [pc, #164]	; (800226c <__sflush_r+0x100>)
 80021c8:	40ca      	lsrs	r2, r1
 80021ca:	07d6      	lsls	r6, r2, #31
 80021cc:	d528      	bpl.n	8002220 <__sflush_r+0xb4>
 80021ce:	2200      	movs	r2, #0
 80021d0:	6062      	str	r2, [r4, #4]
 80021d2:	6922      	ldr	r2, [r4, #16]
 80021d4:	04d9      	lsls	r1, r3, #19
 80021d6:	6022      	str	r2, [r4, #0]
 80021d8:	d504      	bpl.n	80021e4 <__sflush_r+0x78>
 80021da:	1c42      	adds	r2, r0, #1
 80021dc:	d101      	bne.n	80021e2 <__sflush_r+0x76>
 80021de:	682b      	ldr	r3, [r5, #0]
 80021e0:	b903      	cbnz	r3, 80021e4 <__sflush_r+0x78>
 80021e2:	6560      	str	r0, [r4, #84]	; 0x54
 80021e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021e6:	602f      	str	r7, [r5, #0]
 80021e8:	2900      	cmp	r1, #0
 80021ea:	d0cb      	beq.n	8002184 <__sflush_r+0x18>
 80021ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021f0:	4299      	cmp	r1, r3
 80021f2:	d002      	beq.n	80021fa <__sflush_r+0x8e>
 80021f4:	4628      	mov	r0, r5
 80021f6:	f000 f909 	bl	800240c <_free_r>
 80021fa:	2000      	movs	r0, #0
 80021fc:	6360      	str	r0, [r4, #52]	; 0x34
 80021fe:	e7c2      	b.n	8002186 <__sflush_r+0x1a>
 8002200:	6a21      	ldr	r1, [r4, #32]
 8002202:	2301      	movs	r3, #1
 8002204:	4628      	mov	r0, r5
 8002206:	47b0      	blx	r6
 8002208:	1c41      	adds	r1, r0, #1
 800220a:	d1c7      	bne.n	800219c <__sflush_r+0x30>
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0c4      	beq.n	800219c <__sflush_r+0x30>
 8002212:	2b1d      	cmp	r3, #29
 8002214:	d001      	beq.n	800221a <__sflush_r+0xae>
 8002216:	2b16      	cmp	r3, #22
 8002218:	d101      	bne.n	800221e <__sflush_r+0xb2>
 800221a:	602f      	str	r7, [r5, #0]
 800221c:	e7b2      	b.n	8002184 <__sflush_r+0x18>
 800221e:	89a3      	ldrh	r3, [r4, #12]
 8002220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002224:	81a3      	strh	r3, [r4, #12]
 8002226:	e7ae      	b.n	8002186 <__sflush_r+0x1a>
 8002228:	690f      	ldr	r7, [r1, #16]
 800222a:	2f00      	cmp	r7, #0
 800222c:	d0aa      	beq.n	8002184 <__sflush_r+0x18>
 800222e:	0793      	lsls	r3, r2, #30
 8002230:	bf18      	it	ne
 8002232:	2300      	movne	r3, #0
 8002234:	680e      	ldr	r6, [r1, #0]
 8002236:	bf08      	it	eq
 8002238:	694b      	ldreq	r3, [r1, #20]
 800223a:	1bf6      	subs	r6, r6, r7
 800223c:	600f      	str	r7, [r1, #0]
 800223e:	608b      	str	r3, [r1, #8]
 8002240:	2e00      	cmp	r6, #0
 8002242:	dd9f      	ble.n	8002184 <__sflush_r+0x18>
 8002244:	4633      	mov	r3, r6
 8002246:	463a      	mov	r2, r7
 8002248:	4628      	mov	r0, r5
 800224a:	6a21      	ldr	r1, [r4, #32]
 800224c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002250:	47e0      	blx	ip
 8002252:	2800      	cmp	r0, #0
 8002254:	dc06      	bgt.n	8002264 <__sflush_r+0xf8>
 8002256:	89a3      	ldrh	r3, [r4, #12]
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002260:	81a3      	strh	r3, [r4, #12]
 8002262:	e790      	b.n	8002186 <__sflush_r+0x1a>
 8002264:	4407      	add	r7, r0
 8002266:	1a36      	subs	r6, r6, r0
 8002268:	e7ea      	b.n	8002240 <__sflush_r+0xd4>
 800226a:	bf00      	nop
 800226c:	20400001 	.word	0x20400001

08002270 <_fflush_r>:
 8002270:	b538      	push	{r3, r4, r5, lr}
 8002272:	690b      	ldr	r3, [r1, #16]
 8002274:	4605      	mov	r5, r0
 8002276:	460c      	mov	r4, r1
 8002278:	b913      	cbnz	r3, 8002280 <_fflush_r+0x10>
 800227a:	2500      	movs	r5, #0
 800227c:	4628      	mov	r0, r5
 800227e:	bd38      	pop	{r3, r4, r5, pc}
 8002280:	b118      	cbz	r0, 800228a <_fflush_r+0x1a>
 8002282:	6983      	ldr	r3, [r0, #24]
 8002284:	b90b      	cbnz	r3, 800228a <_fflush_r+0x1a>
 8002286:	f7ff fa19 	bl	80016bc <__sinit>
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <_fflush_r+0x6c>)
 800228c:	429c      	cmp	r4, r3
 800228e:	d11b      	bne.n	80022c8 <_fflush_r+0x58>
 8002290:	686c      	ldr	r4, [r5, #4]
 8002292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0ef      	beq.n	800227a <_fflush_r+0xa>
 800229a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800229c:	07d0      	lsls	r0, r2, #31
 800229e:	d404      	bmi.n	80022aa <_fflush_r+0x3a>
 80022a0:	0599      	lsls	r1, r3, #22
 80022a2:	d402      	bmi.n	80022aa <_fflush_r+0x3a>
 80022a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022a6:	f7ff faa7 	bl	80017f8 <__retarget_lock_acquire_recursive>
 80022aa:	4628      	mov	r0, r5
 80022ac:	4621      	mov	r1, r4
 80022ae:	f7ff ff5d 	bl	800216c <__sflush_r>
 80022b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022b4:	4605      	mov	r5, r0
 80022b6:	07da      	lsls	r2, r3, #31
 80022b8:	d4e0      	bmi.n	800227c <_fflush_r+0xc>
 80022ba:	89a3      	ldrh	r3, [r4, #12]
 80022bc:	059b      	lsls	r3, r3, #22
 80022be:	d4dd      	bmi.n	800227c <_fflush_r+0xc>
 80022c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022c2:	f7ff fa9a 	bl	80017fa <__retarget_lock_release_recursive>
 80022c6:	e7d9      	b.n	800227c <_fflush_r+0xc>
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <_fflush_r+0x70>)
 80022ca:	429c      	cmp	r4, r3
 80022cc:	d101      	bne.n	80022d2 <_fflush_r+0x62>
 80022ce:	68ac      	ldr	r4, [r5, #8]
 80022d0:	e7df      	b.n	8002292 <_fflush_r+0x22>
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <_fflush_r+0x74>)
 80022d4:	429c      	cmp	r4, r3
 80022d6:	bf08      	it	eq
 80022d8:	68ec      	ldreq	r4, [r5, #12]
 80022da:	e7da      	b.n	8002292 <_fflush_r+0x22>
 80022dc:	0800257c 	.word	0x0800257c
 80022e0:	0800259c 	.word	0x0800259c
 80022e4:	0800255c 	.word	0x0800255c

080022e8 <_lseek_r>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	4604      	mov	r4, r0
 80022ec:	4608      	mov	r0, r1
 80022ee:	4611      	mov	r1, r2
 80022f0:	2200      	movs	r2, #0
 80022f2:	4d05      	ldr	r5, [pc, #20]	; (8002308 <_lseek_r+0x20>)
 80022f4:	602a      	str	r2, [r5, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f7fe f8a4 	bl	8000444 <_lseek>
 80022fc:	1c43      	adds	r3, r0, #1
 80022fe:	d102      	bne.n	8002306 <_lseek_r+0x1e>
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	b103      	cbz	r3, 8002306 <_lseek_r+0x1e>
 8002304:	6023      	str	r3, [r4, #0]
 8002306:	bd38      	pop	{r3, r4, r5, pc}
 8002308:	200000e8 	.word	0x200000e8

0800230c <__swhatbuf_r>:
 800230c:	b570      	push	{r4, r5, r6, lr}
 800230e:	460e      	mov	r6, r1
 8002310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002314:	4614      	mov	r4, r2
 8002316:	2900      	cmp	r1, #0
 8002318:	461d      	mov	r5, r3
 800231a:	b096      	sub	sp, #88	; 0x58
 800231c:	da08      	bge.n	8002330 <__swhatbuf_r+0x24>
 800231e:	2200      	movs	r2, #0
 8002320:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002324:	602a      	str	r2, [r5, #0]
 8002326:	061a      	lsls	r2, r3, #24
 8002328:	d410      	bmi.n	800234c <__swhatbuf_r+0x40>
 800232a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800232e:	e00e      	b.n	800234e <__swhatbuf_r+0x42>
 8002330:	466a      	mov	r2, sp
 8002332:	f000 f8c5 	bl	80024c0 <_fstat_r>
 8002336:	2800      	cmp	r0, #0
 8002338:	dbf1      	blt.n	800231e <__swhatbuf_r+0x12>
 800233a:	9a01      	ldr	r2, [sp, #4]
 800233c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002340:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002344:	425a      	negs	r2, r3
 8002346:	415a      	adcs	r2, r3
 8002348:	602a      	str	r2, [r5, #0]
 800234a:	e7ee      	b.n	800232a <__swhatbuf_r+0x1e>
 800234c:	2340      	movs	r3, #64	; 0x40
 800234e:	2000      	movs	r0, #0
 8002350:	6023      	str	r3, [r4, #0]
 8002352:	b016      	add	sp, #88	; 0x58
 8002354:	bd70      	pop	{r4, r5, r6, pc}
	...

08002358 <__smakebuf_r>:
 8002358:	898b      	ldrh	r3, [r1, #12]
 800235a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800235c:	079d      	lsls	r5, r3, #30
 800235e:	4606      	mov	r6, r0
 8002360:	460c      	mov	r4, r1
 8002362:	d507      	bpl.n	8002374 <__smakebuf_r+0x1c>
 8002364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002368:	6023      	str	r3, [r4, #0]
 800236a:	6123      	str	r3, [r4, #16]
 800236c:	2301      	movs	r3, #1
 800236e:	6163      	str	r3, [r4, #20]
 8002370:	b002      	add	sp, #8
 8002372:	bd70      	pop	{r4, r5, r6, pc}
 8002374:	466a      	mov	r2, sp
 8002376:	ab01      	add	r3, sp, #4
 8002378:	f7ff ffc8 	bl	800230c <__swhatbuf_r>
 800237c:	9900      	ldr	r1, [sp, #0]
 800237e:	4605      	mov	r5, r0
 8002380:	4630      	mov	r0, r6
 8002382:	f7ff fa5b 	bl	800183c <_malloc_r>
 8002386:	b948      	cbnz	r0, 800239c <__smakebuf_r+0x44>
 8002388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800238c:	059a      	lsls	r2, r3, #22
 800238e:	d4ef      	bmi.n	8002370 <__smakebuf_r+0x18>
 8002390:	f023 0303 	bic.w	r3, r3, #3
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	81a3      	strh	r3, [r4, #12]
 800239a:	e7e3      	b.n	8002364 <__smakebuf_r+0xc>
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <__smakebuf_r+0x7c>)
 800239e:	62b3      	str	r3, [r6, #40]	; 0x28
 80023a0:	89a3      	ldrh	r3, [r4, #12]
 80023a2:	6020      	str	r0, [r4, #0]
 80023a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a8:	81a3      	strh	r3, [r4, #12]
 80023aa:	9b00      	ldr	r3, [sp, #0]
 80023ac:	6120      	str	r0, [r4, #16]
 80023ae:	6163      	str	r3, [r4, #20]
 80023b0:	9b01      	ldr	r3, [sp, #4]
 80023b2:	b15b      	cbz	r3, 80023cc <__smakebuf_r+0x74>
 80023b4:	4630      	mov	r0, r6
 80023b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023ba:	f000 f893 	bl	80024e4 <_isatty_r>
 80023be:	b128      	cbz	r0, 80023cc <__smakebuf_r+0x74>
 80023c0:	89a3      	ldrh	r3, [r4, #12]
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	81a3      	strh	r3, [r4, #12]
 80023cc:	89a0      	ldrh	r0, [r4, #12]
 80023ce:	4305      	orrs	r5, r0
 80023d0:	81a5      	strh	r5, [r4, #12]
 80023d2:	e7cd      	b.n	8002370 <__smakebuf_r+0x18>
 80023d4:	08001655 	.word	0x08001655

080023d8 <memchr>:
 80023d8:	4603      	mov	r3, r0
 80023da:	b510      	push	{r4, lr}
 80023dc:	b2c9      	uxtb	r1, r1
 80023de:	4402      	add	r2, r0
 80023e0:	4293      	cmp	r3, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	d101      	bne.n	80023ea <memchr+0x12>
 80023e6:	2000      	movs	r0, #0
 80023e8:	e003      	b.n	80023f2 <memchr+0x1a>
 80023ea:	7804      	ldrb	r4, [r0, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	428c      	cmp	r4, r1
 80023f0:	d1f6      	bne.n	80023e0 <memchr+0x8>
 80023f2:	bd10      	pop	{r4, pc}

080023f4 <__malloc_lock>:
 80023f4:	4801      	ldr	r0, [pc, #4]	; (80023fc <__malloc_lock+0x8>)
 80023f6:	f7ff b9ff 	b.w	80017f8 <__retarget_lock_acquire_recursive>
 80023fa:	bf00      	nop
 80023fc:	200000dc 	.word	0x200000dc

08002400 <__malloc_unlock>:
 8002400:	4801      	ldr	r0, [pc, #4]	; (8002408 <__malloc_unlock+0x8>)
 8002402:	f7ff b9fa 	b.w	80017fa <__retarget_lock_release_recursive>
 8002406:	bf00      	nop
 8002408:	200000dc 	.word	0x200000dc

0800240c <_free_r>:
 800240c:	b538      	push	{r3, r4, r5, lr}
 800240e:	4605      	mov	r5, r0
 8002410:	2900      	cmp	r1, #0
 8002412:	d040      	beq.n	8002496 <_free_r+0x8a>
 8002414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002418:	1f0c      	subs	r4, r1, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	bfb8      	it	lt
 800241e:	18e4      	addlt	r4, r4, r3
 8002420:	f7ff ffe8 	bl	80023f4 <__malloc_lock>
 8002424:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <_free_r+0x8c>)
 8002426:	6813      	ldr	r3, [r2, #0]
 8002428:	b933      	cbnz	r3, 8002438 <_free_r+0x2c>
 800242a:	6063      	str	r3, [r4, #4]
 800242c:	6014      	str	r4, [r2, #0]
 800242e:	4628      	mov	r0, r5
 8002430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002434:	f7ff bfe4 	b.w	8002400 <__malloc_unlock>
 8002438:	42a3      	cmp	r3, r4
 800243a:	d908      	bls.n	800244e <_free_r+0x42>
 800243c:	6820      	ldr	r0, [r4, #0]
 800243e:	1821      	adds	r1, r4, r0
 8002440:	428b      	cmp	r3, r1
 8002442:	bf01      	itttt	eq
 8002444:	6819      	ldreq	r1, [r3, #0]
 8002446:	685b      	ldreq	r3, [r3, #4]
 8002448:	1809      	addeq	r1, r1, r0
 800244a:	6021      	streq	r1, [r4, #0]
 800244c:	e7ed      	b.n	800242a <_free_r+0x1e>
 800244e:	461a      	mov	r2, r3
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	b10b      	cbz	r3, 8002458 <_free_r+0x4c>
 8002454:	42a3      	cmp	r3, r4
 8002456:	d9fa      	bls.n	800244e <_free_r+0x42>
 8002458:	6811      	ldr	r1, [r2, #0]
 800245a:	1850      	adds	r0, r2, r1
 800245c:	42a0      	cmp	r0, r4
 800245e:	d10b      	bne.n	8002478 <_free_r+0x6c>
 8002460:	6820      	ldr	r0, [r4, #0]
 8002462:	4401      	add	r1, r0
 8002464:	1850      	adds	r0, r2, r1
 8002466:	4283      	cmp	r3, r0
 8002468:	6011      	str	r1, [r2, #0]
 800246a:	d1e0      	bne.n	800242e <_free_r+0x22>
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4401      	add	r1, r0
 8002472:	6011      	str	r1, [r2, #0]
 8002474:	6053      	str	r3, [r2, #4]
 8002476:	e7da      	b.n	800242e <_free_r+0x22>
 8002478:	d902      	bls.n	8002480 <_free_r+0x74>
 800247a:	230c      	movs	r3, #12
 800247c:	602b      	str	r3, [r5, #0]
 800247e:	e7d6      	b.n	800242e <_free_r+0x22>
 8002480:	6820      	ldr	r0, [r4, #0]
 8002482:	1821      	adds	r1, r4, r0
 8002484:	428b      	cmp	r3, r1
 8002486:	bf01      	itttt	eq
 8002488:	6819      	ldreq	r1, [r3, #0]
 800248a:	685b      	ldreq	r3, [r3, #4]
 800248c:	1809      	addeq	r1, r1, r0
 800248e:	6021      	streq	r1, [r4, #0]
 8002490:	6063      	str	r3, [r4, #4]
 8002492:	6054      	str	r4, [r2, #4]
 8002494:	e7cb      	b.n	800242e <_free_r+0x22>
 8002496:	bd38      	pop	{r3, r4, r5, pc}
 8002498:	200000e0 	.word	0x200000e0

0800249c <_read_r>:
 800249c:	b538      	push	{r3, r4, r5, lr}
 800249e:	4604      	mov	r4, r0
 80024a0:	4608      	mov	r0, r1
 80024a2:	4611      	mov	r1, r2
 80024a4:	2200      	movs	r2, #0
 80024a6:	4d05      	ldr	r5, [pc, #20]	; (80024bc <_read_r+0x20>)
 80024a8:	602a      	str	r2, [r5, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f7fd ff6d 	bl	800038a <_read>
 80024b0:	1c43      	adds	r3, r0, #1
 80024b2:	d102      	bne.n	80024ba <_read_r+0x1e>
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	b103      	cbz	r3, 80024ba <_read_r+0x1e>
 80024b8:	6023      	str	r3, [r4, #0]
 80024ba:	bd38      	pop	{r3, r4, r5, pc}
 80024bc:	200000e8 	.word	0x200000e8

080024c0 <_fstat_r>:
 80024c0:	b538      	push	{r3, r4, r5, lr}
 80024c2:	2300      	movs	r3, #0
 80024c4:	4d06      	ldr	r5, [pc, #24]	; (80024e0 <_fstat_r+0x20>)
 80024c6:	4604      	mov	r4, r0
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	602b      	str	r3, [r5, #0]
 80024ce:	f7fd ffa0 	bl	8000412 <_fstat>
 80024d2:	1c43      	adds	r3, r0, #1
 80024d4:	d102      	bne.n	80024dc <_fstat_r+0x1c>
 80024d6:	682b      	ldr	r3, [r5, #0]
 80024d8:	b103      	cbz	r3, 80024dc <_fstat_r+0x1c>
 80024da:	6023      	str	r3, [r4, #0]
 80024dc:	bd38      	pop	{r3, r4, r5, pc}
 80024de:	bf00      	nop
 80024e0:	200000e8 	.word	0x200000e8

080024e4 <_isatty_r>:
 80024e4:	b538      	push	{r3, r4, r5, lr}
 80024e6:	2300      	movs	r3, #0
 80024e8:	4d05      	ldr	r5, [pc, #20]	; (8002500 <_isatty_r+0x1c>)
 80024ea:	4604      	mov	r4, r0
 80024ec:	4608      	mov	r0, r1
 80024ee:	602b      	str	r3, [r5, #0]
 80024f0:	f7fd ff9e 	bl	8000430 <_isatty>
 80024f4:	1c43      	adds	r3, r0, #1
 80024f6:	d102      	bne.n	80024fe <_isatty_r+0x1a>
 80024f8:	682b      	ldr	r3, [r5, #0]
 80024fa:	b103      	cbz	r3, 80024fe <_isatty_r+0x1a>
 80024fc:	6023      	str	r3, [r4, #0]
 80024fe:	bd38      	pop	{r3, r4, r5, pc}
 8002500:	200000e8 	.word	0x200000e8

08002504 <_init>:
 8002504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002506:	bf00      	nop
 8002508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800250a:	bc08      	pop	{r3}
 800250c:	469e      	mov	lr, r3
 800250e:	4770      	bx	lr

08002510 <_fini>:
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002512:	bf00      	nop
 8002514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002516:	bc08      	pop	{r3}
 8002518:	469e      	mov	lr, r3
 800251a:	4770      	bx	lr
