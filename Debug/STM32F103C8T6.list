
STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002404  08002404  00012404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800244c  0800244c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800244c  0800244c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800244c  0800244c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800244c  0800244c  0001244c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08002454  08002454  00012454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800245c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  080024cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080024cc  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b04f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9c  00000000  00000000  0002b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002d088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002da00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a943  00000000  00000000  0002e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa12  00000000  00000000  00048bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a458  00000000  00000000  00053605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dda5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aac  00000000  00000000  000ddab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080023ec 	.word	0x080023ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080023ec 	.word	0x080023ec

0800014c <_ZN8CppClass9ToggleLedEm>:


/// @brief Toggle MCU LED
/// @param sleep as ma
void CppClass::ToggleLed(uint32_t sleep)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
    HAL_GPIO_TogglePin(MCU_LED_GPIO_Port, MCU_LED_Pin);
 8000156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015a:	4805      	ldr	r0, [pc, #20]	; (8000170 <_ZN8CppClass9ToggleLedEm+0x24>)
 800015c:	f001 fa78 	bl	8001650 <HAL_GPIO_TogglePin>
    HAL_Delay(sleep);
 8000160:	6838      	ldr	r0, [r7, #0]
 8000162:	f000 ffd1 	bl	8001108 <HAL_Delay>
}
 8000166:	bf00      	nop
 8000168:	3708      	adds	r7, #8
 800016a:	46bd      	mov	sp, r7
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	40011000 	.word	0x40011000

08000174 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	6039      	str	r1, [r7, #0]
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	4618      	mov	r0, r3
 8000182:	370c      	adds	r7, #12
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr

0800018a <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800018a:	b580      	push	{r7, lr}
 800018c:	b082      	sub	sp, #8
 800018e:	af00      	add	r7, sp, #0
 8000190:	6078      	str	r0, [r7, #4]
 8000192:	6878      	ldr	r0, [r7, #4]
 8000194:	f000 f854 	bl	8000240 <_ZNSaImED1Ev>
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4618      	mov	r0, r3
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}

080001a2 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80001a2:	b580      	push	{r7, lr}
 80001a4:	b082      	sub	sp, #8
 80001a6:	af00      	add	r7, sp, #0
 80001a8:	6078      	str	r0, [r7, #4]
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f837 	bl	8000220 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	4618      	mov	r0, r3
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	4618      	mov	r0, r3
 80001c8:	f7ff ffeb 	bl	80001a2 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4618      	mov	r0, r3
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
	...

080001d8 <CppMain>:
uint32_t time = 0;
CppClass myCppClass;


void CppMain()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

  while (1)
  {
    myCppClass.ToggleLed(time);
 80001dc:	4b0d      	ldr	r3, [pc, #52]	; (8000214 <CppMain+0x3c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4619      	mov	r1, r3
 80001e2:	480d      	ldr	r0, [pc, #52]	; (8000218 <CppMain+0x40>)
 80001e4:	f7ff ffb2 	bl	800014c <_ZN8CppClass9ToggleLedEm>
    if (time<5000)
 80001e8:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <CppMain+0x3c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f241 3287 	movw	r2, #4999	; 0x1387
 80001f0:	4293      	cmp	r3, r2
 80001f2:	d806      	bhi.n	8000202 <CppMain+0x2a>
    {
      time+=500;
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <CppMain+0x3c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80001fc:	4a05      	ldr	r2, [pc, #20]	; (8000214 <CppMain+0x3c>)
 80001fe:	6013      	str	r3, [r2, #0]
 8000200:	e002      	b.n	8000208 <CppMain+0x30>
    }
    else
    {
      time=0;
 8000202:	4b04      	ldr	r3, [pc, #16]	; (8000214 <CppMain+0x3c>)
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
    }
    
    v.push_back(time); // increase the toggling time
 8000208:	4902      	ldr	r1, [pc, #8]	; (8000214 <CppMain+0x3c>)
 800020a:	4804      	ldr	r0, [pc, #16]	; (800021c <CppMain+0x44>)
 800020c:	f000 f83d 	bl	800028a <_ZNSt6vectorImSaImEE9push_backERKm>
    myCppClass.ToggleLed(time);
 8000210:	e7e4      	b.n	80001dc <CppMain+0x4>
 8000212:	bf00      	nop
 8000214:	20000098 	.word	0x20000098
 8000218:	2000009c 	.word	0x2000009c
 800021c:	2000008c 	.word	0x2000008c

08000220 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f000 f853 	bl	80002d4 <_ZNSaImEC1Ev>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f85b 	bl	80002ec <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4618      	mov	r0, r3
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <_ZNSaImED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f000 f862 	bl	8000312 <_ZN9__gnu_cxx13new_allocatorImED1Ev>
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4618      	mov	r0, r3
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	689a      	ldr	r2, [r3, #8]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1ad3      	subs	r3, r2, r3
 800026e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000270:	461a      	mov	r2, r3
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f000 f857 	bl	8000326 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff85 	bl	800018a <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4618      	mov	r0, r3
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}

0800028a <_ZNSt6vectorImSaImEE9push_backERKm>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800028a:	b580      	push	{r7, lr}
 800028c:	b082      	sub	sp, #8
 800028e:	af00      	add	r7, sp, #0
 8000290:	6078      	str	r0, [r7, #4]
 8000292:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	685a      	ldr	r2, [r3, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	429a      	cmp	r2, r3
 800029e:	d00c      	beq.n	80002ba <_ZNSt6vectorImSaImEE9push_backERKm+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	683a      	ldr	r2, [r7, #0]
 80002a8:	4619      	mov	r1, r3
 80002aa:	f000 f84f 	bl	800034c <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	685b      	ldr	r3, [r3, #4]
 80002b2:	1d1a      	adds	r2, r3, #4
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 80002b8:	e008      	b.n	80002cc <_ZNSt6vectorImSaImEE9push_backERKm+0x42>
	  _M_realloc_insert(end(), __x);
 80002ba:	6878      	ldr	r0, [r7, #4]
 80002bc:	f000 f859 	bl	8000372 <_ZNSt6vectorImSaImEE3endEv>
 80002c0:	4603      	mov	r3, r0
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	4619      	mov	r1, r3
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f000 f87a 	bl	80003c0 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>
      }
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f000 f92b 	bl	8000538 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4618      	mov	r0, r3
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2200      	movs	r2, #0
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
	{ }
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4618      	mov	r0, r3
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr

08000312 <_ZN9__gnu_cxx13new_allocatorImED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000312:	b480      	push	{r7}
 8000314:	b083      	sub	sp, #12
 8000316:	af00      	add	r7, sp, #0
 8000318:	6078      	str	r0, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4618      	mov	r0, r3
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr

08000326 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	60f8      	str	r0, [r7, #12]
 800032e:	60b9      	str	r1, [r7, #8]
 8000330:	607a      	str	r2, [r7, #4]
	if (__p)
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d005      	beq.n	8000344 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	68b9      	ldr	r1, [r7, #8]
 800033e:	4618      	mov	r0, r3
 8000340:	f000 f904 	bl	800054c <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 8000344:	bf00      	nop
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f000 f906 	bl	800056a <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	68b9      	ldr	r1, [r7, #8]
 8000364:	68f8      	ldr	r0, [r7, #12]
 8000366:	f000 f90a 	bl	800057e <_ZN9__gnu_cxx13new_allocatorImE9constructImJRKmEEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <_ZNSt6vectorImSaImEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000372:	b580      	push	{r7, lr}
 8000374:	b084      	sub	sp, #16
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	1d1a      	adds	r2, r3, #4
 800037e:	f107 030c 	add.w	r3, r7, #12
 8000382:	4611      	mov	r1, r2
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f910 	bl	80005aa <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	4618      	mov	r0, r3
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <_ZNSt6vectorImSaImEE15_S_use_relocateEv>:
      _S_use_relocate()
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f805 	bl	80003aa <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80003a0:	4603      	mov	r3, r0
      }
 80003a2:	4618      	mov	r0, r3
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80003aa:	b480      	push	{r7}
 80003ac:	b083      	sub	sp, #12
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80003b2:	2301      	movs	r3, #1
      }
 80003b4:	4618      	mov	r0, r3
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
	...

080003c0 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80003c0:	b5b0      	push	{r4, r5, r7, lr}
 80003c2:	b08c      	sub	sp, #48	; 0x30
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80003cc:	4a59      	ldr	r2, [pc, #356]	; (8000534 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x174>)
 80003ce:	2101      	movs	r1, #1
 80003d0:	68f8      	ldr	r0, [r7, #12]
 80003d2:	f000 f8f9 	bl	80005c8 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 80003d6:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80003e4:	68f8      	ldr	r0, [r7, #12]
 80003e6:	f000 f936 	bl	8000656 <_ZNSt6vectorImSaImEE5beginEv>
 80003ea:	4603      	mov	r3, r0
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	f107 0214 	add.w	r2, r7, #20
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	4611      	mov	r1, r2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f93c 	bl	8000676 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80003fe:	4603      	mov	r3, r0
 8000400:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f94a 	bl	80006a0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 800040c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800040e:	69bb      	ldr	r3, [r7, #24]
 8000410:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000412:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000414:	69fb      	ldr	r3, [r7, #28]
 8000416:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8000418:	69ba      	ldr	r2, [r7, #24]
 800041a:	18d5      	adds	r5, r2, r3
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f000 f8a4 	bl	800056a <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8000422:	4603      	mov	r3, r0
 8000424:	461a      	mov	r2, r3
 8000426:	4629      	mov	r1, r5
 8000428:	4620      	mov	r0, r4
 800042a:	f7ff ff8f 	bl	800034c <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800042e:	2300      	movs	r3, #0
 8000430:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000432:	f7ff ffaf 	bl	8000394 <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d027      	beq.n	800048c <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800043c:	f107 0308 	add.w	r3, r7, #8
 8000440:	4618      	mov	r0, r3
 8000442:	f000 f955 	bl	80006f0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8000446:	4603      	mov	r3, r0
 8000448:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	4618      	mov	r0, r3
 800044e:	f000 f959 	bl	8000704 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8000452:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	4621      	mov	r1, r4
 8000458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800045a:	f000 f935 	bl	80006c8 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 800045e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000462:	3304      	adds	r3, #4
 8000464:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000466:	f107 0308 	add.w	r3, r7, #8
 800046a:	4618      	mov	r0, r3
 800046c:	f000 f940 	bl	80006f0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8000470:	4603      	mov	r3, r0
 8000472:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f944 	bl	8000704 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800047c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800047e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000480:	6a39      	ldr	r1, [r7, #32]
 8000482:	4620      	mov	r0, r4
 8000484:	f000 f920 	bl	80006c8 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 8000488:	62f8      	str	r0, [r7, #44]	; 0x2c
 800048a:	e026      	b.n	80004da <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800048c:	f107 0308 	add.w	r3, r7, #8
 8000490:	4618      	mov	r0, r3
 8000492:	f000 f92d 	bl	80006f0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8000496:	4603      	mov	r3, r0
 8000498:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f931 	bl	8000704 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80004a2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80004a4:	69ba      	ldr	r2, [r7, #24]
 80004a6:	4621      	mov	r1, r4
 80004a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004aa:	f000 f935 	bl	8000718 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 80004ae:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80004b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004b2:	3304      	adds	r3, #4
 80004b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f918 	bl	80006f0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 80004c0:	4603      	mov	r3, r0
 80004c2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f91c 	bl	8000704 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80004cc:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80004ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004d0:	6a39      	ldr	r1, [r7, #32]
 80004d2:	4620      	mov	r0, r4
 80004d4:	f000 f920 	bl	8000718 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 80004d8:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80004da:	f7ff ff5b 	bl	8000394 <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 80004de:	4603      	mov	r3, r0
 80004e0:	f083 0301 	eor.w	r3, r3, #1
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d009      	beq.n	80004fe <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 f909 	bl	8000704 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80004f2:	4603      	mov	r3, r0
 80004f4:	461a      	mov	r2, r3
 80004f6:	6a39      	ldr	r1, [r7, #32]
 80004f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004fa:	f000 f926 	bl	800074a <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80004fe:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	689a      	ldr	r2, [r3, #8]
 8000504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800050a:	461a      	mov	r2, r3
 800050c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800050e:	f7ff ff0a 	bl	8000326 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      this->_M_impl._M_start = __new_start;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	69ba      	ldr	r2, [r7, #24]
 8000516:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800051c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800051e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	69ba      	ldr	r2, [r7, #24]
 8000524:	441a      	add	r2, r3
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	609a      	str	r2, [r3, #8]
    }
 800052a:	bf00      	nop
 800052c:	3730      	adds	r7, #48	; 0x30
 800052e:	46bd      	mov	sp, r7
 8000530:	bdb0      	pop	{r4, r5, r7, pc}
 8000532:	bf00      	nop
 8000534:	08002404 	.word	0x08002404

08000538 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	68b9      	ldr	r1, [r7, #8]
 800055c:	68f8      	ldr	r0, [r7, #12]
 800055e:	f000 f902 	bl	8000766 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <_ZN9__gnu_cxx13new_allocatorImE9constructImJRKmEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800057e:	b590      	push	{r4, r7, lr}
 8000580:	b085      	sub	sp, #20
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f7ff ffed 	bl	800056a <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8000590:	4603      	mov	r3, r0
 8000592:	681c      	ldr	r4, [r3, #0]
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	4619      	mov	r1, r3
 8000598:	2004      	movs	r0, #4
 800059a:	f7ff fdeb 	bl	8000174 <_ZnwjPv>
 800059e:	4603      	mov	r3, r0
 80005a0:	601c      	str	r4, [r3, #0]
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd90      	pop	{r4, r7, pc}

080005aa <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80005d4:	68f8      	ldr	r0, [r7, #12]
 80005d6:	f000 f8d6 	bl	8000786 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 80005da:	4604      	mov	r4, r0
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	f000 f8e3 	bl	80007a8 <_ZNKSt6vectorImSaImEE4sizeEv>
 80005e2:	4603      	mov	r3, r0
 80005e4:	1ae2      	subs	r2, r4, r3
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	bf34      	ite	cc
 80005ec:	2301      	movcc	r3, #1
 80005ee:	2300      	movcs	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d002      	beq.n	80005fc <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f001 fd48 	bl	800208c <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f000 f8d3 	bl	80007a8 <_ZNKSt6vectorImSaImEE4sizeEv>
 8000602:	4604      	mov	r4, r0
 8000604:	68f8      	ldr	r0, [r7, #12]
 8000606:	f000 f8cf 	bl	80007a8 <_ZNKSt6vectorImSaImEE4sizeEv>
 800060a:	4603      	mov	r3, r0
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	f107 0208 	add.w	r2, r7, #8
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4611      	mov	r1, r2
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f8d4 	bl	80007c6 <_ZSt3maxIjERKT_S2_S2_>
 800061e:	4603      	mov	r3, r0
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4423      	add	r3, r4
 8000624:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000626:	68f8      	ldr	r0, [r7, #12]
 8000628:	f000 f8be 	bl	80007a8 <_ZNKSt6vectorImSaImEE4sizeEv>
 800062c:	4602      	mov	r2, r0
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	4293      	cmp	r3, r2
 8000632:	d306      	bcc.n	8000642 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x7a>
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	f000 f8a6 	bl	8000786 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 800063a:	4602      	mov	r2, r0
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	4293      	cmp	r3, r2
 8000640:	d904      	bls.n	800064c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x84>
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f000 f89f 	bl	8000786 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8000648:	4603      	mov	r3, r0
 800064a:	e000      	b.n	800064e <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x86>
 800064c:	697b      	ldr	r3, [r7, #20]
      }
 800064e:	4618      	mov	r0, r3
 8000650:	371c      	adds	r7, #28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd90      	pop	{r4, r7, pc}

08000656 <_ZNSt6vectorImSaImEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000656:	b580      	push	{r7, lr}
 8000658:	b084      	sub	sp, #16
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4611      	mov	r1, r2
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff9f 	bl	80005aa <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000676:	b590      	push	{r4, r7, lr}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f000 f835 	bl	80006f0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8000686:	4603      	mov	r3, r0
 8000688:	681c      	ldr	r4, [r3, #0]
 800068a:	6838      	ldr	r0, [r7, #0]
 800068c:	f000 f830 	bl	80006f0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8000690:	4603      	mov	r3, r0
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	1ae3      	subs	r3, r4, r3
 8000696:	109b      	asrs	r3, r3, #2
 8000698:	4618      	mov	r0, r3
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	bd90      	pop	{r4, r7, pc}

080006a0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d006      	beq.n	80006be <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6839      	ldr	r1, [r7, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f899 	bl	80007ec <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 80006ba:	4603      	mov	r3, r0
 80006bc:	e000      	b.n	80006c0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 80006be:	2300      	movs	r3, #0
      }
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af02      	add	r7, sp, #8
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
 80006d4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80006d6:	f88d 4000 	strb.w	r4, [sp]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	68b9      	ldr	r1, [r7, #8]
 80006e0:	68f8      	ldr	r0, [r7, #12]
 80006e2:	f000 f892 	bl	800080a <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>
 80006e6:	4603      	mov	r3, r0
      }
 80006e8:	4618      	mov	r0, r3
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}

080006f0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f000 f881 	bl	800082e <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 800072c:	4604      	mov	r4, r0
 800072e:	68b8      	ldr	r0, [r7, #8]
 8000730:	f000 f87d 	bl	800082e <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 8000734:	4601      	mov	r1, r0
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	4620      	mov	r0, r4
 800073c:	f000 f886 	bl	800084c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>
 8000740:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8000742:	4618      	mov	r0, r3
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bd90      	pop	{r4, r7, pc}

0800074a <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800074a:	b580      	push	{r7, lr}
 800074c:	b084      	sub	sp, #16
 800074e:	af00      	add	r7, sp, #0
 8000750:	60f8      	str	r0, [r7, #12]
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000756:	68b9      	ldr	r1, [r7, #8]
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f000 f888 	bl	800086e <_ZSt8_DestroyIPmEvT_S1_>
    }
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
      deallocate(_Tp* __p, size_type __t)
 8000766:	b580      	push	{r7, lr}
 8000768:	b084      	sub	sp, #16
 800076a:	af00      	add	r7, sp, #0
 800076c:	60f8      	str	r0, [r7, #12]
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4619      	mov	r1, r3
 8000778:	68b8      	ldr	r0, [r7, #8]
 800077a:	f001 fc71 	bl	8002060 <_ZdlPvj>
      }
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_ZNKSt6vectorImSaImEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f893 	bl	80008bc <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8000796:	4603      	mov	r3, r0
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f875 	bl	8000888 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 800079e:	4603      	mov	r3, r0
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <_ZNKSt6vectorImSaImEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	685a      	ldr	r2, [r3, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	109b      	asrs	r3, r3, #2
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d201      	bcs.n	80007e0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	e000      	b.n	80007e2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80007e0:	687b      	ldr	r3, [r7, #4]
    }
 80007e2:	4618      	mov	r0, r3
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80007f6:	2200      	movs	r2, #0
 80007f8:	6839      	ldr	r1, [r7, #0]
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f000 f868 	bl	80008d0 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 8000800:	4603      	mov	r3, r0
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800080a:	b580      	push	{r7, lr}
 800080c:	b084      	sub	sp, #16
 800080e:	af00      	add	r7, sp, #0
 8000810:	60f8      	str	r0, [r7, #12]
 8000812:	60b9      	str	r1, [r7, #8]
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	f000 f874 	bl	800090c <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8000824:	4603      	mov	r3, r0
      }
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800082e:	b580      	push	{r7, lr}
 8000830:	b084      	sub	sp, #16
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f882 	bl	8000946 <_ZNSt13move_iteratorIPmEC1ES0_>
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f000 f883 	bl	800096a <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 8000864:	4603      	mov	r3, r0
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_ZSt8_DestroyIPmEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000878:	6839      	ldr	r1, [r7, #0]
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 f887 	bl	800098e <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8000890:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000894:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f883 	bl	80009a2 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 800089c:	4603      	mov	r3, r0
 800089e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80008a0:	f107 0208 	add.w	r2, r7, #8
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f885 	bl	80009ba <_ZSt3minIjERKT_S2_S2_>
 80008b0:	4603      	mov	r3, r0
 80008b2:	681b      	ldr	r3, [r3, #0]
      }
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4618      	mov	r0, r3
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f000 f87f 	bl	80009e0 <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 80008e2:	4602      	mov	r2, r0
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4293      	cmp	r3, r2
 80008e8:	bf8c      	ite	hi
 80008ea:	2301      	movhi	r3, #1
 80008ec:	2300      	movls	r3, #0
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80008f4:	f001 fbc7 	bl	8002086 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 fbb1 	bl	8002064 <_Znwj>
 8000902:	4603      	mov	r3, r0
      }
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800090c:	b5b0      	push	{r4, r5, r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f000 f86b 	bl	80009f6 <_ZSt12__niter_baseIPmET_S1_>
 8000920:	4604      	mov	r4, r0
 8000922:	68b8      	ldr	r0, [r7, #8]
 8000924:	f000 f867 	bl	80009f6 <_ZSt12__niter_baseIPmET_S1_>
 8000928:	4605      	mov	r5, r0
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f000 f863 	bl	80009f6 <_ZSt12__niter_baseIPmET_S1_>
 8000930:	4602      	mov	r2, r0
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	4629      	mov	r1, r5
 8000936:	4620      	mov	r0, r4
 8000938:	f000 f867 	bl	8000a0a <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 800093c:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bdb0      	pop	{r4, r5, r7, pc}

08000946 <_ZNSt13move_iteratorIPmEC1ES0_>:
      move_iterator(iterator_type __i)
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8000950:	463b      	mov	r3, r7
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f877 	bl	8000a46 <_ZSt4moveIRPmEONSt16remove_referenceIT_E4typeEOS3_>
 8000958:	4603      	mov	r3, r0
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8000976:	2301      	movs	r3, #1
 8000978:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f000 f86b 	bl	8000a5a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>
 8000984:	4603      	mov	r3, r0
    }
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr

080009a2 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 f865 	bl	8000a7a <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 80009b0:	4603      	mov	r3, r0
      }
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d201      	bcs.n	80009d4 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	e000      	b.n	80009d6 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80009d4:	687b      	ldr	r3, [r7, #4]
    }
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80009e8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr

080009f6 <_ZSt12__niter_baseIPmET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr

08000a0a <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8000a18:	68ba      	ldr	r2, [r7, #8]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	109b      	asrs	r3, r3, #2
 8000a20:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	dd06      	ble.n	8000a36 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	68f9      	ldr	r1, [r7, #12]
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f001 fb7b 	bl	800212c <memmove>
      return __result + __count;
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	4413      	add	r3, r2
    }
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_ZSt4moveIRPmEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b084      	sub	sp, #16
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	68b9      	ldr	r1, [r7, #8]
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f000 f811 	bl	8000a92 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffac 	bl	80009e0 <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8000a92:	b590      	push	{r4, r7, lr}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f000 f80f 	bl	8000ac2 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	68b8      	ldr	r0, [r7, #8]
 8000aa8:	f000 f80b 	bl	8000ac2 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8000aac:	4603      	mov	r3, r0
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f000 f816 	bl	8000ae4 <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>
 8000ab8:	4603      	mov	r3, r0
    }
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd90      	pop	{r4, r7, pc}

08000ac2 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f82c 	bl	8000b2a <_ZNKSt13move_iteratorIPmE4baseEv>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f833 	bl	8000b40 <_ZSt12__miter_baseIPmET_S1_>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8000ae4:	b5b0      	push	{r4, r5, r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff ff80 	bl	80009f6 <_ZSt12__niter_baseIPmET_S1_>
 8000af6:	4604      	mov	r4, r0
 8000af8:	68b8      	ldr	r0, [r7, #8]
 8000afa:	f7ff ff7c 	bl	80009f6 <_ZSt12__niter_baseIPmET_S1_>
 8000afe:	4605      	mov	r5, r0
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff77 	bl	80009f6 <_ZSt12__niter_baseIPmET_S1_>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4629      	mov	r1, r5
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f000 f820 	bl	8000b54 <_ZSt14__copy_move_a1ILb1EPmS0_ET1_T0_S2_S1_>
 8000b14:	4602      	mov	r2, r0
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f82a 	bl	8000b74 <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 8000b20:	4603      	mov	r3, r0
    }
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bdb0      	pop	{r4, r5, r7, pc}

08000b2a <_ZNKSt13move_iteratorIPmE4baseEv>:
      base() const
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <_ZSt12__miter_baseIPmET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <_ZSt14__copy_move_a1ILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f000 f810 	bl	8000b8a <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_ZSt12__niter_wrapIPmET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
    { return __res; }
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b084      	sub	sp, #16
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f000 f805 	bl	8000baa <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 8000ba0:	4603      	mov	r3, r0
    }
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	109b      	asrs	r3, r3, #2
 8000bbe:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d006      	beq.n	8000bd4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68f9      	ldr	r1, [r7, #12]
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f001 faac 	bl	800212c <memmove>
	  return __result + _Num;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4413      	add	r3, r2
	}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_Z41__static_initialization_and_destruction_0ii>:
  }
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d107      	bne.n	8000c04 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d102      	bne.n	8000c04 <_Z41__static_initialization_and_destruction_0ii+0x20>
vector <uint32_t> v;
 8000bfe:	4809      	ldr	r0, [pc, #36]	; (8000c24 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000c00:	f7ff fadc 	bl	80001bc <_ZNSt6vectorImSaImEEC1Ev>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d107      	bne.n	8000c1a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d102      	bne.n	8000c1a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000c16:	f000 f807 	bl	8000c28 <_ZNSt6vectorImSaImEED1Ev>
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000008c 	.word	0x2000008c

08000c28 <_ZNSt6vectorImSaImEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681c      	ldr	r4, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fd62 	bl	8000704 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8000c40:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000c42:	461a      	mov	r2, r3
 8000c44:	4629      	mov	r1, r5
 8000c46:	4620      	mov	r0, r4
 8000c48:	f7ff fd7f 	bl	800074a <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      }
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fb02 	bl	8000258 <_ZNSt12_Vector_baseImSaImEED1Ev>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bdb0      	pop	{r4, r5, r7, pc}

08000c5e <_GLOBAL__sub_I_v>:
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c66:	2001      	movs	r0, #1
 8000c68:	f7ff ffbc 	bl	8000be4 <_Z41__static_initialization_and_destruction_0ii>
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_GLOBAL__sub_D_v>:
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff ffb4 	bl	8000be4 <_Z41__static_initialization_and_destruction_0ii>
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_GPIO_Init+0x90>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a1d      	ldr	r2, [pc, #116]	; (8000d10 <MX_GPIO_Init+0x90>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_GPIO_Init+0x90>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_GPIO_Init+0x90>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <MX_GPIO_Init+0x90>)
 8000cb2:	f043 0320 	orr.w	r3, r3, #32
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_GPIO_Init+0x90>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0320 	and.w	r3, r3, #32
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_GPIO_Init+0x90>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a11      	ldr	r2, [pc, #68]	; (8000d10 <MX_GPIO_Init+0x90>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_GPIO_Init+0x90>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce2:	480c      	ldr	r0, [pc, #48]	; (8000d14 <MX_GPIO_Init+0x94>)
 8000ce4:	f000 fc9c 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_LED_Pin;
 8000ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_LED_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_GPIO_Init+0x94>)
 8000d02:	f000 fb09 	bl	8001318 <HAL_GPIO_Init>

}
 8000d06:	bf00      	nop
 8000d08:	3720      	adds	r7, #32
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40011000 	.word	0x40011000

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1c:	f000 f992 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d20:	f000 f807 	bl	8000d32 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d24:	f7ff ffac 	bl	8000c80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d28:	f000 f8f2 	bl	8000f10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  CppMain();
 8000d2c:	f7ff fa54 	bl	80001d8 <CppMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <main+0x18>

08000d32 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b090      	sub	sp, #64	; 0x40
 8000d36:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d38:	f107 0318 	add.w	r3, r7, #24
 8000d3c:	2228      	movs	r2, #40	; 0x28
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fa0d 	bl	8002160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d62:	2301      	movs	r3, #1
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d66:	2302      	movs	r3, #2
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000d70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fc82 	bl	8001684 <HAL_RCC_OscConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d86:	f000 f818 	bl	8000dba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 fef0 	bl	8001b88 <HAL_RCC_ClockConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000dae:	f000 f804 	bl	8000dba <Error_Handler>
  }
}
 8000db2:	bf00      	nop
 8000db4:	3740      	adds	r7, #64	; 0x40
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbe:	b672      	cpsid	i
}
 8000dc0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <Error_Handler+0x8>

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_MspInit+0x40>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_MspInit+0x40>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6193      	str	r3, [r2, #24]
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_MspInit+0x40>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_MspInit+0x40>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_MspInit+0x40>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	61d3      	str	r3, [r2, #28]
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_MspInit+0x40>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	40021000 	.word	0x40021000

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x4>

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4e:	f000 f93f 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  return 1;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <_kill>:

int _kill(int pid, int sig)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e6e:	f001 f923 	bl	80020b8 <__errno>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2216      	movs	r2, #22
 8000e76:	601a      	str	r2, [r3, #0]
  return -1;
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_exit>:

void _exit (int status)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ffe7 	bl	8000e64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e96:	e7fe      	b.n	8000e96 <_exit+0x12>

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f001 f8f6 	bl	80020b8 <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20005000 	.word	0x20005000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	200000a4 	.word	0x200000a4
 8000f00:	20000108 	.word	0x20000108

08000f04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <MX_USART2_UART_Init+0x50>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f48:	f000 ffac 	bl	8001ea4 <HAL_UART_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f52:	f7ff ff32 	bl	8000dba <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000a8 	.word	0x200000a8
 8000f60:	40004400 	.word	0x40004400

08000f64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d12f      	bne.n	8000fe4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f84:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8e:	61d3      	str	r3, [r2, #28]
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <HAL_UART_MspInit+0x90>)
 8000fc8:	f000 f9a6 	bl	8001318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_UART_MspInit+0x90>)
 8000fe0:	f000 f99a 	bl	8001318 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40004400 	.word	0x40004400
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010800 	.word	0x40010800

08000ff8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff8:	f7ff ff84 	bl	8000f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480b      	ldr	r0, [pc, #44]	; (800102c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ffe:	490c      	ldr	r1, [pc, #48]	; (8001030 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a09      	ldr	r2, [pc, #36]	; (8001038 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001014:	4c09      	ldr	r4, [pc, #36]	; (800103c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001022:	f001 f84f 	bl	80020c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001026:	f7ff fe77 	bl	8000d18 <main>
  bx lr
 800102a:	4770      	bx	lr
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001034:	0800245c 	.word	0x0800245c
  ldr r2, =_sbss
 8001038:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800103c:	20000108 	.word	0x20000108

08001040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_2_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x28>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x28>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f92b 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	200f      	movs	r0, #15
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff feb0 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f935 	bl	80012fe <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f90b 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_IncTick+0x1c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x20>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <HAL_IncTick+0x20>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	20000008 	.word	0x20000008
 80010f0:	200000f0 	.word	0x200000f0

080010f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <HAL_GetTick+0x10>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	200000f0 	.word	0x200000f0

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff fff0 	bl	80010f4 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffe0 	bl	80010f4 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff90 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff49 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff5e 	bl	8001198 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff90 	bl	8001208 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5f 	bl	80011b4 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffb0 	bl	800126c <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e169      	b.n	8001600 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800132c:	2201      	movs	r2, #1
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	429a      	cmp	r2, r3
 8001346:	f040 8158 	bne.w	80015fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a9a      	ldr	r2, [pc, #616]	; (80015b8 <HAL_GPIO_Init+0x2a0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d05e      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001354:	4a98      	ldr	r2, [pc, #608]	; (80015b8 <HAL_GPIO_Init+0x2a0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d875      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800135a:	4a98      	ldr	r2, [pc, #608]	; (80015bc <HAL_GPIO_Init+0x2a4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d058      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001360:	4a96      	ldr	r2, [pc, #600]	; (80015bc <HAL_GPIO_Init+0x2a4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d86f      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001366:	4a96      	ldr	r2, [pc, #600]	; (80015c0 <HAL_GPIO_Init+0x2a8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d052      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 800136c:	4a94      	ldr	r2, [pc, #592]	; (80015c0 <HAL_GPIO_Init+0x2a8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d869      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001372:	4a94      	ldr	r2, [pc, #592]	; (80015c4 <HAL_GPIO_Init+0x2ac>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d04c      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001378:	4a92      	ldr	r2, [pc, #584]	; (80015c4 <HAL_GPIO_Init+0x2ac>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d863      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800137e:	4a92      	ldr	r2, [pc, #584]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d046      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001384:	4a90      	ldr	r2, [pc, #576]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d85d      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800138a:	2b12      	cmp	r3, #18
 800138c:	d82a      	bhi.n	80013e4 <HAL_GPIO_Init+0xcc>
 800138e:	2b12      	cmp	r3, #18
 8001390:	d859      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001392:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <HAL_GPIO_Init+0x80>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	08001413 	.word	0x08001413
 800139c:	080013ed 	.word	0x080013ed
 80013a0:	080013ff 	.word	0x080013ff
 80013a4:	08001441 	.word	0x08001441
 80013a8:	08001447 	.word	0x08001447
 80013ac:	08001447 	.word	0x08001447
 80013b0:	08001447 	.word	0x08001447
 80013b4:	08001447 	.word	0x08001447
 80013b8:	08001447 	.word	0x08001447
 80013bc:	08001447 	.word	0x08001447
 80013c0:	08001447 	.word	0x08001447
 80013c4:	08001447 	.word	0x08001447
 80013c8:	08001447 	.word	0x08001447
 80013cc:	08001447 	.word	0x08001447
 80013d0:	08001447 	.word	0x08001447
 80013d4:	08001447 	.word	0x08001447
 80013d8:	08001447 	.word	0x08001447
 80013dc:	080013f5 	.word	0x080013f5
 80013e0:	08001409 	.word	0x08001409
 80013e4:	4a79      	ldr	r2, [pc, #484]	; (80015cc <HAL_GPIO_Init+0x2b4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ea:	e02c      	b.n	8001446 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	623b      	str	r3, [r7, #32]
          break;
 80013f2:	e029      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	3304      	adds	r3, #4
 80013fa:	623b      	str	r3, [r7, #32]
          break;
 80013fc:	e024      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	3308      	adds	r3, #8
 8001404:	623b      	str	r3, [r7, #32]
          break;
 8001406:	e01f      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	330c      	adds	r3, #12
 800140e:	623b      	str	r3, [r7, #32]
          break;
 8001410:	e01a      	b.n	8001448 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800141a:	2304      	movs	r3, #4
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e013      	b.n	8001448 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001428:	2308      	movs	r3, #8
 800142a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	611a      	str	r2, [r3, #16]
          break;
 8001432:	e009      	b.n	8001448 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001434:	2308      	movs	r3, #8
 8001436:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	615a      	str	r2, [r3, #20]
          break;
 800143e:	e003      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x130>
          break;
 8001446:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2bff      	cmp	r3, #255	; 0xff
 800144c:	d801      	bhi.n	8001452 <HAL_GPIO_Init+0x13a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_Init+0x13e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3304      	adds	r3, #4
 8001456:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2bff      	cmp	r3, #255	; 0xff
 800145c:	d802      	bhi.n	8001464 <HAL_GPIO_Init+0x14c>
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x152>
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	3b08      	subs	r3, #8
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	210f      	movs	r1, #15
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	401a      	ands	r2, r3
 800147c:	6a39      	ldr	r1, [r7, #32]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	431a      	orrs	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80b1 	beq.w	80015fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001498:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a4c      	ldr	r2, [pc, #304]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014b0:	4a48      	ldr	r2, [pc, #288]	; (80015d4 <HAL_GPIO_Init+0x2bc>)
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a40      	ldr	r2, [pc, #256]	; (80015d8 <HAL_GPIO_Init+0x2c0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d013      	beq.n	8001504 <HAL_GPIO_Init+0x1ec>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a3f      	ldr	r2, [pc, #252]	; (80015dc <HAL_GPIO_Init+0x2c4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d00d      	beq.n	8001500 <HAL_GPIO_Init+0x1e8>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a3e      	ldr	r2, [pc, #248]	; (80015e0 <HAL_GPIO_Init+0x2c8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x1e4>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_GPIO_Init+0x1e0>
 80014f4:	2303      	movs	r3, #3
 80014f6:	e006      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 80014f8:	2304      	movs	r3, #4
 80014fa:	e004      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <HAL_GPIO_Init+0x1ee>
 8001504:	2300      	movs	r3, #0
 8001506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001508:	f002 0203 	and.w	r2, r2, #3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4093      	lsls	r3, r2
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001516:	492f      	ldr	r1, [pc, #188]	; (80015d4 <HAL_GPIO_Init+0x2bc>)
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	492c      	ldr	r1, [pc, #176]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	4928      	ldr	r1, [pc, #160]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001548:	4013      	ands	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001558:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	4922      	ldr	r1, [pc, #136]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	60cb      	str	r3, [r1, #12]
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	43db      	mvns	r3, r3
 800156e:	491e      	ldr	r1, [pc, #120]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001570:	4013      	ands	r3, r2
 8001572:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	4918      	ldr	r1, [pc, #96]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	43db      	mvns	r3, r3
 8001596:	4914      	ldr	r1, [pc, #80]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001598:	4013      	ands	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d021      	beq.n	80015ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	490e      	ldr	r1, [pc, #56]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e021      	b.n	80015fa <HAL_GPIO_Init+0x2e2>
 80015b6:	bf00      	nop
 80015b8:	10320000 	.word	0x10320000
 80015bc:	10310000 	.word	0x10310000
 80015c0:	10220000 	.word	0x10220000
 80015c4:	10210000 	.word	0x10210000
 80015c8:	10120000 	.word	0x10120000
 80015cc:	10110000 	.word	0x10110000
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000
 80015d8:	40010800 	.word	0x40010800
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	40011000 	.word	0x40011000
 80015e4:	40011400 	.word	0x40011400
 80015e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_GPIO_Init+0x304>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4909      	ldr	r1, [pc, #36]	; (800161c <HAL_GPIO_Init+0x304>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	3301      	adds	r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	f47f ae8e 	bne.w	800132c <HAL_GPIO_Init+0x14>
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	372c      	adds	r7, #44	; 0x2c
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800163c:	e003      	b.n	8001646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	611a      	str	r2, [r3, #16]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4013      	ands	r3, r2
 8001668:	041a      	lsls	r2, r3, #16
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	43d9      	mvns	r1, r3
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	400b      	ands	r3, r1
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	611a      	str	r2, [r3, #16]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
	...

08001684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e272      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8087 	beq.w	80017b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a4:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d00c      	beq.n	80016ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b0:	4b8f      	ldr	r3, [pc, #572]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d112      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
 80016bc:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d10b      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d06c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x12c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d168      	bne.n	80017b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e24c      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x76>
 80016ec:	4b80      	ldr	r3, [pc, #512]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a7f      	ldr	r2, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e02e      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7a      	ldr	r2, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b78      	ldr	r3, [pc, #480]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a77      	ldr	r2, [pc, #476]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e01d      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0xbc>
 8001726:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6a      	ldr	r2, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a67      	ldr	r2, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fcc8 	bl	80010f4 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fcc4 	bl	80010f4 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e200      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0xe4>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fcb4 	bl	80010f4 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fcb0 	bl	80010f4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1ec      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x10c>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d11c      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
 80017d6:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d116      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e1c0      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4939      	ldr	r1, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	e03a      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fc69 	bl	80010f4 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fc65 	bl	80010f4 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e1a1      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4927      	ldr	r1, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fc48 	bl	80010f4 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fc44 	bl	80010f4 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e180      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d03a      	beq.n	8001908 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d019      	beq.n	80018ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff fc28 	bl	80010f4 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff fc24 	bl	80010f4 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e160      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f000 face 	bl	8001e68 <RCC_Delay>
 80018cc:	e01c      	b.n	8001908 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fc0e 	bl	80010f4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018da:	e00f      	b.n	80018fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fc0a 	bl	80010f4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d908      	bls.n	80018fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e146      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	42420000 	.word	0x42420000
 80018f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e9      	bne.n	80018dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a6 	beq.w	8001a62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191a:	4b8b      	ldr	r3, [pc, #556]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10d      	bne.n	8001942 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b88      	ldr	r3, [pc, #544]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a87      	ldr	r2, [pc, #540]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b85      	ldr	r3, [pc, #532]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b82      	ldr	r3, [pc, #520]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d118      	bne.n	8001980 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194e:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a7e      	ldr	r2, [pc, #504]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195a:	f7ff fbcb 	bl	80010f4 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001962:	f7ff fbc7 	bl	80010f4 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b64      	cmp	r3, #100	; 0x64
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e103      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b75      	ldr	r3, [pc, #468]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x312>
 8001988:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a6e      	ldr	r2, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e02d      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x334>
 800199e:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a69      	ldr	r2, [pc, #420]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6213      	str	r3, [r2, #32]
 80019aa:	4b67      	ldr	r3, [pc, #412]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a66      	ldr	r2, [pc, #408]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	e01c      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0x356>
 80019c0:	4b61      	ldr	r3, [pc, #388]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a60      	ldr	r2, [pc, #384]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	4b5e      	ldr	r3, [pc, #376]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a5d      	ldr	r2, [pc, #372]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e00b      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019da:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a5a      	ldr	r2, [pc, #360]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	4b58      	ldr	r3, [pc, #352]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a57      	ldr	r2, [pc, #348]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d015      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fb7b 	bl	80010f4 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff fb77 	bl	80010f4 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0b1      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a18:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ee      	beq.n	8001a02 <HAL_RCC_OscConfig+0x37e>
 8001a24:	e014      	b.n	8001a50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fb65 	bl	80010f4 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fb61 	bl	80010f4 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e09b      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d105      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a3b      	ldr	r2, [pc, #236]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8087 	beq.w	8001b7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d061      	beq.n	8001b3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d146      	bne.n	8001b0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <HAL_RCC_OscConfig+0x4cc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fb35 	bl	80010f4 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff fb31 	bl	80010f4 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e06d      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d108      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	4921      	ldr	r1, [pc, #132]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a19      	ldr	r1, [r3, #32]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	491b      	ldr	r1, [pc, #108]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_RCC_OscConfig+0x4cc>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fb05 	bl	80010f4 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff fb01 	bl	80010f4 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e03d      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x46a>
 8001b0c:	e035      	b.n	8001b7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_RCC_OscConfig+0x4cc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff faee 	bl	80010f4 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff faea 	bl	80010f4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e026      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x498>
 8001b3a:	e01e      	b.n	8001b7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e019      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40007000 	.word	0x40007000
 8001b50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_OscConfig+0x500>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000

08001b88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0d0      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d910      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 0207 	bic.w	r2, r3, #7
 8001bb2:	4965      	ldr	r1, [pc, #404]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b8      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be4:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	494d      	ldr	r1, [pc, #308]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d040      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d115      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e07f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e073      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e06b      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c66:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f023 0203 	bic.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4936      	ldr	r1, [pc, #216]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c78:	f7ff fa3c 	bl	80010f4 <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7ff fa38 	bl	80010f4 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e053      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 020c 	and.w	r2, r3, #12
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1eb      	bne.n	8001c80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d210      	bcs.n	8001cd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 0207 	bic.w	r2, r3, #7
 8001cbe:	4922      	ldr	r1, [pc, #136]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e032      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4916      	ldr	r1, [pc, #88]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	490e      	ldr	r1, [pc, #56]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d16:	f000 f821 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	490a      	ldr	r1, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001d28:	5ccb      	ldrb	r3, [r1, r3]
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1cc>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1d0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f99a 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	08002420 	.word	0x08002420
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d002      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x30>
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d003      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x36>
 8001d8a:	e027      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d8e:	613b      	str	r3, [r7, #16]
      break;
 8001d90:	e027      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	0c9b      	lsrs	r3, r3, #18
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d010      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	0c5b      	lsrs	r3, r3, #17
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dbe:	fb03 f202 	mul.w	r2, r3, r2
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e004      	b.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dd0:	fb02 f303 	mul.w	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	613b      	str	r3, [r7, #16]
      break;
 8001dda:	e002      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dde:	613b      	str	r3, [r7, #16]
      break;
 8001de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001de2:	693b      	ldr	r3, [r7, #16]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	007a1200 	.word	0x007a1200
 8001df8:	08002438 	.word	0x08002438
 8001dfc:	08002448 	.word	0x08002448
 8001e00:	003d0900 	.word	0x003d0900

08001e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e08:	4b02      	ldr	r3, [pc, #8]	; (8001e14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000000 	.word	0x20000000

08001e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e1c:	f7ff fff2 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	08002430 	.word	0x08002430

08001e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e44:	f7ff ffde 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	0adb      	lsrs	r3, r3, #11
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4903      	ldr	r1, [pc, #12]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08002430 	.word	0x08002430

08001e68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <RCC_Delay+0x34>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <RCC_Delay+0x38>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0a5b      	lsrs	r3, r3, #9
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e84:	bf00      	nop
  }
  while (Delay --);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1e5a      	subs	r2, r3, #1
 8001e8a:	60fa      	str	r2, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f9      	bne.n	8001e84 <RCC_Delay+0x1c>
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	10624dd3 	.word	0x10624dd3

08001ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e042      	b.n	8001f3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff f84a 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2224      	movs	r2, #36	; 0x24
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f82b 	bl	8001f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f7e:	f023 030c 	bic.w	r3, r3, #12
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a2c      	ldr	r2, [pc, #176]	; (8002058 <UART_SetConfig+0x114>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d103      	bne.n	8001fb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fac:	f7ff ff48 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	e002      	b.n	8001fba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fb4:	f7ff ff30 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8001fb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009a      	lsls	r2, r3, #2
 8001fc4:	441a      	add	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	4a22      	ldr	r2, [pc, #136]	; (800205c <UART_SetConfig+0x118>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	0119      	lsls	r1, r3, #4
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009a      	lsls	r2, r3, #2
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <UART_SetConfig+0x118>)
 8001ff2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2064      	movs	r0, #100	; 0x64
 8001ffa:	fb00 f303 	mul.w	r3, r0, r3
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	3332      	adds	r3, #50	; 0x32
 8002004:	4a15      	ldr	r2, [pc, #84]	; (800205c <UART_SetConfig+0x118>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002010:	4419      	add	r1, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	009a      	lsls	r2, r3, #2
 800201c:	441a      	add	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	fbb2 f2f3 	udiv	r2, r2, r3
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <UART_SetConfig+0x118>)
 800202a:	fba3 0302 	umull	r0, r3, r3, r2
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	2064      	movs	r0, #100	; 0x64
 8002032:	fb00 f303 	mul.w	r3, r0, r3
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	3332      	adds	r3, #50	; 0x32
 800203c:	4a07      	ldr	r2, [pc, #28]	; (800205c <UART_SetConfig+0x118>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	f003 020f 	and.w	r2, r3, #15
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	440a      	add	r2, r1
 800204e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40013800 	.word	0x40013800
 800205c:	51eb851f 	.word	0x51eb851f

08002060 <_ZdlPvj>:
 8002060:	f000 b817 	b.w	8002092 <_ZdlPv>

08002064 <_Znwj>:
 8002064:	2801      	cmp	r0, #1
 8002066:	bf38      	it	cc
 8002068:	2001      	movcc	r0, #1
 800206a:	b510      	push	{r4, lr}
 800206c:	4604      	mov	r4, r0
 800206e:	4620      	mov	r0, r4
 8002070:	f000 f84c 	bl	800210c <malloc>
 8002074:	b930      	cbnz	r0, 8002084 <_Znwj+0x20>
 8002076:	f000 f80f 	bl	8002098 <_ZSt15get_new_handlerv>
 800207a:	b908      	cbnz	r0, 8002080 <_Znwj+0x1c>
 800207c:	f000 f814 	bl	80020a8 <abort>
 8002080:	4780      	blx	r0
 8002082:	e7f4      	b.n	800206e <_Znwj+0xa>
 8002084:	bd10      	pop	{r4, pc}

08002086 <_ZSt17__throw_bad_allocv>:
 8002086:	b508      	push	{r3, lr}
 8002088:	f000 f80e 	bl	80020a8 <abort>

0800208c <_ZSt20__throw_length_errorPKc>:
 800208c:	b508      	push	{r3, lr}
 800208e:	f000 f80b 	bl	80020a8 <abort>

08002092 <_ZdlPv>:
 8002092:	f000 b843 	b.w	800211c <free>
	...

08002098 <_ZSt15get_new_handlerv>:
 8002098:	4b02      	ldr	r3, [pc, #8]	; (80020a4 <_ZSt15get_new_handlerv+0xc>)
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	f3bf 8f5b 	dmb	ish
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	200000f4 	.word	0x200000f4

080020a8 <abort>:
 80020a8:	2006      	movs	r0, #6
 80020aa:	b508      	push	{r3, lr}
 80020ac:	f000 f974 	bl	8002398 <raise>
 80020b0:	2001      	movs	r0, #1
 80020b2:	f7fe fee7 	bl	8000e84 <_exit>
	...

080020b8 <__errno>:
 80020b8:	4b01      	ldr	r3, [pc, #4]	; (80020c0 <__errno+0x8>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	2000000c 	.word	0x2000000c

080020c4 <__libc_init_array>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	2600      	movs	r6, #0
 80020c8:	4d0c      	ldr	r5, [pc, #48]	; (80020fc <__libc_init_array+0x38>)
 80020ca:	4c0d      	ldr	r4, [pc, #52]	; (8002100 <__libc_init_array+0x3c>)
 80020cc:	1b64      	subs	r4, r4, r5
 80020ce:	10a4      	asrs	r4, r4, #2
 80020d0:	42a6      	cmp	r6, r4
 80020d2:	d109      	bne.n	80020e8 <__libc_init_array+0x24>
 80020d4:	f000 f98a 	bl	80023ec <_init>
 80020d8:	2600      	movs	r6, #0
 80020da:	4d0a      	ldr	r5, [pc, #40]	; (8002104 <__libc_init_array+0x40>)
 80020dc:	4c0a      	ldr	r4, [pc, #40]	; (8002108 <__libc_init_array+0x44>)
 80020de:	1b64      	subs	r4, r4, r5
 80020e0:	10a4      	asrs	r4, r4, #2
 80020e2:	42a6      	cmp	r6, r4
 80020e4:	d105      	bne.n	80020f2 <__libc_init_array+0x2e>
 80020e6:	bd70      	pop	{r4, r5, r6, pc}
 80020e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ec:	4798      	blx	r3
 80020ee:	3601      	adds	r6, #1
 80020f0:	e7ee      	b.n	80020d0 <__libc_init_array+0xc>
 80020f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f6:	4798      	blx	r3
 80020f8:	3601      	adds	r6, #1
 80020fa:	e7f2      	b.n	80020e2 <__libc_init_array+0x1e>
 80020fc:	0800244c 	.word	0x0800244c
 8002100:	0800244c 	.word	0x0800244c
 8002104:	0800244c 	.word	0x0800244c
 8002108:	08002454 	.word	0x08002454

0800210c <malloc>:
 800210c:	4b02      	ldr	r3, [pc, #8]	; (8002118 <malloc+0xc>)
 800210e:	4601      	mov	r1, r0
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	f000 b895 	b.w	8002240 <_malloc_r>
 8002116:	bf00      	nop
 8002118:	2000000c 	.word	0x2000000c

0800211c <free>:
 800211c:	4b02      	ldr	r3, [pc, #8]	; (8002128 <free+0xc>)
 800211e:	4601      	mov	r1, r0
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	f000 b825 	b.w	8002170 <_free_r>
 8002126:	bf00      	nop
 8002128:	2000000c 	.word	0x2000000c

0800212c <memmove>:
 800212c:	4288      	cmp	r0, r1
 800212e:	b510      	push	{r4, lr}
 8002130:	eb01 0402 	add.w	r4, r1, r2
 8002134:	d902      	bls.n	800213c <memmove+0x10>
 8002136:	4284      	cmp	r4, r0
 8002138:	4623      	mov	r3, r4
 800213a:	d807      	bhi.n	800214c <memmove+0x20>
 800213c:	1e43      	subs	r3, r0, #1
 800213e:	42a1      	cmp	r1, r4
 8002140:	d008      	beq.n	8002154 <memmove+0x28>
 8002142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800214a:	e7f8      	b.n	800213e <memmove+0x12>
 800214c:	4601      	mov	r1, r0
 800214e:	4402      	add	r2, r0
 8002150:	428a      	cmp	r2, r1
 8002152:	d100      	bne.n	8002156 <memmove+0x2a>
 8002154:	bd10      	pop	{r4, pc}
 8002156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800215a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800215e:	e7f7      	b.n	8002150 <memmove+0x24>

08002160 <memset>:
 8002160:	4603      	mov	r3, r0
 8002162:	4402      	add	r2, r0
 8002164:	4293      	cmp	r3, r2
 8002166:	d100      	bne.n	800216a <memset+0xa>
 8002168:	4770      	bx	lr
 800216a:	f803 1b01 	strb.w	r1, [r3], #1
 800216e:	e7f9      	b.n	8002164 <memset+0x4>

08002170 <_free_r>:
 8002170:	b538      	push	{r3, r4, r5, lr}
 8002172:	4605      	mov	r5, r0
 8002174:	2900      	cmp	r1, #0
 8002176:	d040      	beq.n	80021fa <_free_r+0x8a>
 8002178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800217c:	1f0c      	subs	r4, r1, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	bfb8      	it	lt
 8002182:	18e4      	addlt	r4, r4, r3
 8002184:	f000 f924 	bl	80023d0 <__malloc_lock>
 8002188:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <_free_r+0x8c>)
 800218a:	6813      	ldr	r3, [r2, #0]
 800218c:	b933      	cbnz	r3, 800219c <_free_r+0x2c>
 800218e:	6063      	str	r3, [r4, #4]
 8002190:	6014      	str	r4, [r2, #0]
 8002192:	4628      	mov	r0, r5
 8002194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002198:	f000 b920 	b.w	80023dc <__malloc_unlock>
 800219c:	42a3      	cmp	r3, r4
 800219e:	d908      	bls.n	80021b2 <_free_r+0x42>
 80021a0:	6820      	ldr	r0, [r4, #0]
 80021a2:	1821      	adds	r1, r4, r0
 80021a4:	428b      	cmp	r3, r1
 80021a6:	bf01      	itttt	eq
 80021a8:	6819      	ldreq	r1, [r3, #0]
 80021aa:	685b      	ldreq	r3, [r3, #4]
 80021ac:	1809      	addeq	r1, r1, r0
 80021ae:	6021      	streq	r1, [r4, #0]
 80021b0:	e7ed      	b.n	800218e <_free_r+0x1e>
 80021b2:	461a      	mov	r2, r3
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	b10b      	cbz	r3, 80021bc <_free_r+0x4c>
 80021b8:	42a3      	cmp	r3, r4
 80021ba:	d9fa      	bls.n	80021b2 <_free_r+0x42>
 80021bc:	6811      	ldr	r1, [r2, #0]
 80021be:	1850      	adds	r0, r2, r1
 80021c0:	42a0      	cmp	r0, r4
 80021c2:	d10b      	bne.n	80021dc <_free_r+0x6c>
 80021c4:	6820      	ldr	r0, [r4, #0]
 80021c6:	4401      	add	r1, r0
 80021c8:	1850      	adds	r0, r2, r1
 80021ca:	4283      	cmp	r3, r0
 80021cc:	6011      	str	r1, [r2, #0]
 80021ce:	d1e0      	bne.n	8002192 <_free_r+0x22>
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4401      	add	r1, r0
 80021d6:	6011      	str	r1, [r2, #0]
 80021d8:	6053      	str	r3, [r2, #4]
 80021da:	e7da      	b.n	8002192 <_free_r+0x22>
 80021dc:	d902      	bls.n	80021e4 <_free_r+0x74>
 80021de:	230c      	movs	r3, #12
 80021e0:	602b      	str	r3, [r5, #0]
 80021e2:	e7d6      	b.n	8002192 <_free_r+0x22>
 80021e4:	6820      	ldr	r0, [r4, #0]
 80021e6:	1821      	adds	r1, r4, r0
 80021e8:	428b      	cmp	r3, r1
 80021ea:	bf01      	itttt	eq
 80021ec:	6819      	ldreq	r1, [r3, #0]
 80021ee:	685b      	ldreq	r3, [r3, #4]
 80021f0:	1809      	addeq	r1, r1, r0
 80021f2:	6021      	streq	r1, [r4, #0]
 80021f4:	6063      	str	r3, [r4, #4]
 80021f6:	6054      	str	r4, [r2, #4]
 80021f8:	e7cb      	b.n	8002192 <_free_r+0x22>
 80021fa:	bd38      	pop	{r3, r4, r5, pc}
 80021fc:	200000f8 	.word	0x200000f8

08002200 <sbrk_aligned>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	4e0e      	ldr	r6, [pc, #56]	; (800223c <sbrk_aligned+0x3c>)
 8002204:	460c      	mov	r4, r1
 8002206:	6831      	ldr	r1, [r6, #0]
 8002208:	4605      	mov	r5, r0
 800220a:	b911      	cbnz	r1, 8002212 <sbrk_aligned+0x12>
 800220c:	f000 f88c 	bl	8002328 <_sbrk_r>
 8002210:	6030      	str	r0, [r6, #0]
 8002212:	4621      	mov	r1, r4
 8002214:	4628      	mov	r0, r5
 8002216:	f000 f887 	bl	8002328 <_sbrk_r>
 800221a:	1c43      	adds	r3, r0, #1
 800221c:	d00a      	beq.n	8002234 <sbrk_aligned+0x34>
 800221e:	1cc4      	adds	r4, r0, #3
 8002220:	f024 0403 	bic.w	r4, r4, #3
 8002224:	42a0      	cmp	r0, r4
 8002226:	d007      	beq.n	8002238 <sbrk_aligned+0x38>
 8002228:	1a21      	subs	r1, r4, r0
 800222a:	4628      	mov	r0, r5
 800222c:	f000 f87c 	bl	8002328 <_sbrk_r>
 8002230:	3001      	adds	r0, #1
 8002232:	d101      	bne.n	8002238 <sbrk_aligned+0x38>
 8002234:	f04f 34ff 	mov.w	r4, #4294967295
 8002238:	4620      	mov	r0, r4
 800223a:	bd70      	pop	{r4, r5, r6, pc}
 800223c:	200000fc 	.word	0x200000fc

08002240 <_malloc_r>:
 8002240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002244:	1ccd      	adds	r5, r1, #3
 8002246:	f025 0503 	bic.w	r5, r5, #3
 800224a:	3508      	adds	r5, #8
 800224c:	2d0c      	cmp	r5, #12
 800224e:	bf38      	it	cc
 8002250:	250c      	movcc	r5, #12
 8002252:	2d00      	cmp	r5, #0
 8002254:	4607      	mov	r7, r0
 8002256:	db01      	blt.n	800225c <_malloc_r+0x1c>
 8002258:	42a9      	cmp	r1, r5
 800225a:	d905      	bls.n	8002268 <_malloc_r+0x28>
 800225c:	230c      	movs	r3, #12
 800225e:	2600      	movs	r6, #0
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	4630      	mov	r0, r6
 8002264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002268:	4e2e      	ldr	r6, [pc, #184]	; (8002324 <_malloc_r+0xe4>)
 800226a:	f000 f8b1 	bl	80023d0 <__malloc_lock>
 800226e:	6833      	ldr	r3, [r6, #0]
 8002270:	461c      	mov	r4, r3
 8002272:	bb34      	cbnz	r4, 80022c2 <_malloc_r+0x82>
 8002274:	4629      	mov	r1, r5
 8002276:	4638      	mov	r0, r7
 8002278:	f7ff ffc2 	bl	8002200 <sbrk_aligned>
 800227c:	1c43      	adds	r3, r0, #1
 800227e:	4604      	mov	r4, r0
 8002280:	d14d      	bne.n	800231e <_malloc_r+0xde>
 8002282:	6834      	ldr	r4, [r6, #0]
 8002284:	4626      	mov	r6, r4
 8002286:	2e00      	cmp	r6, #0
 8002288:	d140      	bne.n	800230c <_malloc_r+0xcc>
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	4631      	mov	r1, r6
 800228e:	4638      	mov	r0, r7
 8002290:	eb04 0803 	add.w	r8, r4, r3
 8002294:	f000 f848 	bl	8002328 <_sbrk_r>
 8002298:	4580      	cmp	r8, r0
 800229a:	d13a      	bne.n	8002312 <_malloc_r+0xd2>
 800229c:	6821      	ldr	r1, [r4, #0]
 800229e:	3503      	adds	r5, #3
 80022a0:	1a6d      	subs	r5, r5, r1
 80022a2:	f025 0503 	bic.w	r5, r5, #3
 80022a6:	3508      	adds	r5, #8
 80022a8:	2d0c      	cmp	r5, #12
 80022aa:	bf38      	it	cc
 80022ac:	250c      	movcc	r5, #12
 80022ae:	4638      	mov	r0, r7
 80022b0:	4629      	mov	r1, r5
 80022b2:	f7ff ffa5 	bl	8002200 <sbrk_aligned>
 80022b6:	3001      	adds	r0, #1
 80022b8:	d02b      	beq.n	8002312 <_malloc_r+0xd2>
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	442b      	add	r3, r5
 80022be:	6023      	str	r3, [r4, #0]
 80022c0:	e00e      	b.n	80022e0 <_malloc_r+0xa0>
 80022c2:	6822      	ldr	r2, [r4, #0]
 80022c4:	1b52      	subs	r2, r2, r5
 80022c6:	d41e      	bmi.n	8002306 <_malloc_r+0xc6>
 80022c8:	2a0b      	cmp	r2, #11
 80022ca:	d916      	bls.n	80022fa <_malloc_r+0xba>
 80022cc:	1961      	adds	r1, r4, r5
 80022ce:	42a3      	cmp	r3, r4
 80022d0:	6025      	str	r5, [r4, #0]
 80022d2:	bf18      	it	ne
 80022d4:	6059      	strne	r1, [r3, #4]
 80022d6:	6863      	ldr	r3, [r4, #4]
 80022d8:	bf08      	it	eq
 80022da:	6031      	streq	r1, [r6, #0]
 80022dc:	5162      	str	r2, [r4, r5]
 80022de:	604b      	str	r3, [r1, #4]
 80022e0:	4638      	mov	r0, r7
 80022e2:	f104 060b 	add.w	r6, r4, #11
 80022e6:	f000 f879 	bl	80023dc <__malloc_unlock>
 80022ea:	f026 0607 	bic.w	r6, r6, #7
 80022ee:	1d23      	adds	r3, r4, #4
 80022f0:	1af2      	subs	r2, r6, r3
 80022f2:	d0b6      	beq.n	8002262 <_malloc_r+0x22>
 80022f4:	1b9b      	subs	r3, r3, r6
 80022f6:	50a3      	str	r3, [r4, r2]
 80022f8:	e7b3      	b.n	8002262 <_malloc_r+0x22>
 80022fa:	6862      	ldr	r2, [r4, #4]
 80022fc:	42a3      	cmp	r3, r4
 80022fe:	bf0c      	ite	eq
 8002300:	6032      	streq	r2, [r6, #0]
 8002302:	605a      	strne	r2, [r3, #4]
 8002304:	e7ec      	b.n	80022e0 <_malloc_r+0xa0>
 8002306:	4623      	mov	r3, r4
 8002308:	6864      	ldr	r4, [r4, #4]
 800230a:	e7b2      	b.n	8002272 <_malloc_r+0x32>
 800230c:	4634      	mov	r4, r6
 800230e:	6876      	ldr	r6, [r6, #4]
 8002310:	e7b9      	b.n	8002286 <_malloc_r+0x46>
 8002312:	230c      	movs	r3, #12
 8002314:	4638      	mov	r0, r7
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	f000 f860 	bl	80023dc <__malloc_unlock>
 800231c:	e7a1      	b.n	8002262 <_malloc_r+0x22>
 800231e:	6025      	str	r5, [r4, #0]
 8002320:	e7de      	b.n	80022e0 <_malloc_r+0xa0>
 8002322:	bf00      	nop
 8002324:	200000f8 	.word	0x200000f8

08002328 <_sbrk_r>:
 8002328:	b538      	push	{r3, r4, r5, lr}
 800232a:	2300      	movs	r3, #0
 800232c:	4d05      	ldr	r5, [pc, #20]	; (8002344 <_sbrk_r+0x1c>)
 800232e:	4604      	mov	r4, r0
 8002330:	4608      	mov	r0, r1
 8002332:	602b      	str	r3, [r5, #0]
 8002334:	f7fe fdb0 	bl	8000e98 <_sbrk>
 8002338:	1c43      	adds	r3, r0, #1
 800233a:	d102      	bne.n	8002342 <_sbrk_r+0x1a>
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	b103      	cbz	r3, 8002342 <_sbrk_r+0x1a>
 8002340:	6023      	str	r3, [r4, #0]
 8002342:	bd38      	pop	{r3, r4, r5, pc}
 8002344:	20000100 	.word	0x20000100

08002348 <_raise_r>:
 8002348:	291f      	cmp	r1, #31
 800234a:	b538      	push	{r3, r4, r5, lr}
 800234c:	4604      	mov	r4, r0
 800234e:	460d      	mov	r5, r1
 8002350:	d904      	bls.n	800235c <_raise_r+0x14>
 8002352:	2316      	movs	r3, #22
 8002354:	6003      	str	r3, [r0, #0]
 8002356:	f04f 30ff 	mov.w	r0, #4294967295
 800235a:	bd38      	pop	{r3, r4, r5, pc}
 800235c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800235e:	b112      	cbz	r2, 8002366 <_raise_r+0x1e>
 8002360:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002364:	b94b      	cbnz	r3, 800237a <_raise_r+0x32>
 8002366:	4620      	mov	r0, r4
 8002368:	f000 f830 	bl	80023cc <_getpid_r>
 800236c:	462a      	mov	r2, r5
 800236e:	4601      	mov	r1, r0
 8002370:	4620      	mov	r0, r4
 8002372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002376:	f000 b817 	b.w	80023a8 <_kill_r>
 800237a:	2b01      	cmp	r3, #1
 800237c:	d00a      	beq.n	8002394 <_raise_r+0x4c>
 800237e:	1c59      	adds	r1, r3, #1
 8002380:	d103      	bne.n	800238a <_raise_r+0x42>
 8002382:	2316      	movs	r3, #22
 8002384:	6003      	str	r3, [r0, #0]
 8002386:	2001      	movs	r0, #1
 8002388:	e7e7      	b.n	800235a <_raise_r+0x12>
 800238a:	2400      	movs	r4, #0
 800238c:	4628      	mov	r0, r5
 800238e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002392:	4798      	blx	r3
 8002394:	2000      	movs	r0, #0
 8002396:	e7e0      	b.n	800235a <_raise_r+0x12>

08002398 <raise>:
 8002398:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <raise+0xc>)
 800239a:	4601      	mov	r1, r0
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	f7ff bfd3 	b.w	8002348 <_raise_r>
 80023a2:	bf00      	nop
 80023a4:	2000000c 	.word	0x2000000c

080023a8 <_kill_r>:
 80023a8:	b538      	push	{r3, r4, r5, lr}
 80023aa:	2300      	movs	r3, #0
 80023ac:	4d06      	ldr	r5, [pc, #24]	; (80023c8 <_kill_r+0x20>)
 80023ae:	4604      	mov	r4, r0
 80023b0:	4608      	mov	r0, r1
 80023b2:	4611      	mov	r1, r2
 80023b4:	602b      	str	r3, [r5, #0]
 80023b6:	f7fe fd55 	bl	8000e64 <_kill>
 80023ba:	1c43      	adds	r3, r0, #1
 80023bc:	d102      	bne.n	80023c4 <_kill_r+0x1c>
 80023be:	682b      	ldr	r3, [r5, #0]
 80023c0:	b103      	cbz	r3, 80023c4 <_kill_r+0x1c>
 80023c2:	6023      	str	r3, [r4, #0]
 80023c4:	bd38      	pop	{r3, r4, r5, pc}
 80023c6:	bf00      	nop
 80023c8:	20000100 	.word	0x20000100

080023cc <_getpid_r>:
 80023cc:	f7fe bd43 	b.w	8000e56 <_getpid>

080023d0 <__malloc_lock>:
 80023d0:	4801      	ldr	r0, [pc, #4]	; (80023d8 <__malloc_lock+0x8>)
 80023d2:	f000 b809 	b.w	80023e8 <__retarget_lock_acquire_recursive>
 80023d6:	bf00      	nop
 80023d8:	20000104 	.word	0x20000104

080023dc <__malloc_unlock>:
 80023dc:	4801      	ldr	r0, [pc, #4]	; (80023e4 <__malloc_unlock+0x8>)
 80023de:	f000 b804 	b.w	80023ea <__retarget_lock_release_recursive>
 80023e2:	bf00      	nop
 80023e4:	20000104 	.word	0x20000104

080023e8 <__retarget_lock_acquire_recursive>:
 80023e8:	4770      	bx	lr

080023ea <__retarget_lock_release_recursive>:
 80023ea:	4770      	bx	lr

080023ec <_init>:
 80023ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ee:	bf00      	nop
 80023f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f2:	bc08      	pop	{r3}
 80023f4:	469e      	mov	lr, r3
 80023f6:	4770      	bx	lr

080023f8 <_fini>:
 80023f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fa:	bf00      	nop
 80023fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023fe:	bc08      	pop	{r3}
 8002400:	469e      	mov	lr, r3
 8002402:	4770      	bx	lr
